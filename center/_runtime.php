<?php
 class base_control { public $conf = array(); private $cache_conf = NULL; function __construct(&$conf) { $this->conf = &$conf; core::$control = $this; } public function __get($var) { if (class_exists($var)) { $this->$var = new $var(); return $this->$var; } else { $this->$var = core::model($this->conf, $var); if (!$this->$var) { throw new Exception('Not Found Model:' . $var); } else { return $this->$var; } } } public function __call($method, $args) { throw new Exception('base_control.class.php Not implement method：' . $method . ': (' . var_export($args, 1) . ')'); } public function show($template = '', $make_file = '', $charset = '', $compress = 6, $by_return = 0) { $template = $template ? $template : core::R('c') . '_' . core::R('a') . '.htm'; if ((!$make_file && $make_file != 'NO') && $this->cache_conf) { $make_file = 'CACHE:memcache:' . $this->cache_conf['key'] . ':' . $this->cache_conf['time']; } return VI::display($this, $template, $make_file, $charset, $compress, $by_return); } public function cache_page($cache_key, $cache_time = 60) { if ($cache_time < 1) { return false; } $cache_key = 'p_' . $cache_key; $exists = CACHE::get($cache_key); if ($exists !== false && !is_null($exists)) { $file_time = $exists['time']; $gmt_mtime = gmdate('D, d M Y H:i:s', $file_time) . ' GMT'; $this->set_cache_header($cache_time, $exists['time']); if (stripos($_SERVER['HTTP_IF_MODIFIED_SINCE'], $gmt_mtime) !== false) { header($_SERVER['SERVER_PROTOCOL'] . " 304 Not Modified", true, 304); exit; } if (stripos($_SERVER['HTTP_ACCEPT_ENCODING'], 'gzip') !== false) { header('Content-Encoding: gzip'); echo $exists['body']; } else { echo gzinflate(substr($exists['body'], 0x0a, -8)); } exit; } $this->set_cache_header($cache_time); $this->cache_conf = array( 'key' => $cache_key, 'time' => $cache_time, ); } public function set_cache_header($cache_time = 3600, $time = 0) { $time = $time ? $time : $_SERVER['time']; $gmt_mtime = gmdate('D, d M Y H:i:s', $time) . ' GMT'; header("Expires: " . gmdate("D, d M Y H:i:s", $time + $cache_time) . " GMT"); header("Cache-Control: max-age=" . $cache_time); header("Last-Modified: " . $gmt_mtime); } } ?><?php
 class base_model { public $table; public $primary_key; function __construct($table, $primary_key) { $this->table = $table; $this->primary_key = $primary_key; } public function update($data, $id) { if (is_array($id)) { return DB::update($this->table, $data, $id); } else { return DB::update($this->table, $data, array($this->primary_key => $id)); } } public function insert($data, $return_id = 0) { return DB::insert($this->table, $data, $return_id); } public function replace($data) { return DB::replace($this->table, $data); } public function select($where, $order = 0, $perpage = -1, $page = 1, $index = '') { return DB::select($this->table, $where, $order, $perpage, $page, $index); } public function get($id) { $where = array($this->primary_key => $id); $perpage = 0; if (is_array($id)) { if (isset($id[0])) { $id = array_map('addslashes', $id); $where = $this->primary_key . ' IN (\'' . implode("','", $id) . '\')'; $perpage = -1; } else { $where = $id; } } return DB::select($this->table, $where, 0, $perpage); } public function delete($id) { if (is_array($id)) { if (isset($id[0])) { foreach ($id as $_id) { self::delete($_id); } return 1; } else { return DB::delete($this->table, $id); } } else { return DB::delete($this->table, array($this->primary_key => $id)); } } } ?><?php
 class file_cache { function __construct(&$conf) { $this->conf = &$conf; $dir = $this->conf['dir']; if (!is_dir($dir)) { @mkdir($dir, 0755, true); if (!is_dir($dir)) { throw new Exception('FileCache Dir cant created!'); } } $this->conf['dir'] = $dir; return true; } public function init() { return true; } public function get($key) { $data = array(); if (is_array($key)) { foreach ($key as $k) { $arr = $this->get($k); $data[$k] = $arr; } return $data; } else { $file_path = $this->get_file($key); if (is_file($file_path)) { $res = $this->get_file_data($file_path); if ($this->get_time() >= $res['expire']) { $this->delete($key); return false; } else { return $res['body']; } } else { return false; } } } public function set($key, $value, $life = 0) { $file_path = $this->get_file($key); $life = $life == 0 ? 600 : $life; $res = array( 'expire' => $this->get_time() + $life, 'body' => &$value ); if (file_put_contents($file_path, $this->gen_file_body($res))) { return true; } else { return false; } } public function update($key, $value, $life = 0) { return $this->set($key, $value, $life); } public function delete($key) { $file_path = $this->get_file($key); return @unlink($file_path); } public function truncate($pre = '') { } private function get_file($key) { static $dir_exists = array(); $key_name = substr($key, -2); $key_path = $this->conf['dir'] . $key_name . '/'; if (isset($dir_exists[$key_path])) { return $key_path . $key . ''; } if (is_dir($key_path)) { $dir_exists[$key_path] = 1; return $key_path . $key . ''; } mkdir($key_path, 0777, true); if (is_dir($key_path)) { $dir_exists[$key_path] = 1; return $key_path . $key . ''; } else { throw new Exception('Cant Create FileCache Path'); } } private function get_time() { static $time; if (!$time) { $time = time(); } return $time; } private function gen_file_body($list) { return json_encode($list); } private function get_file_data($path) { $data = json_decode(file_get_contents($path), 1); return $data; } } ?><?php
 class memcache_cache { private $support_getmulti; private $link = NULL; private $servers = 0; private $memcached = 0; function __construct(&$conf) { $this->support_getmulti = false; if (extension_loaded('Memcached')) { $this->link = new Memcached; $this->support_getmulti = true; $this->memcached = 1; } elseif (extension_loaded('Memcache')) { $this->link = new Memcache; } else { throw new Exception('Memcache Extension not loaded.'); } $hosts = $conf['host']; if (!is_array($hosts)) { $hosts = explode('|', $conf['host']); } $this->servers = 0; foreach ($hosts as $host) { $host = $this->get_host_by_str($host); if ($this->link->addServer($host['host'], $host['port'])) { $this->servers++; } } if ($this->servers) { return $this->link; } return false; } private function get_host_by_str($host) { list($host, $port) = explode(':', $host); return array( 'host' => $host, 'port' => $port ? $port : 11211, ); } public function init() { return $this->link === false ? false : true; } public function get($key) { $data = array(); if (is_array($key)) { if ($this->support_getmulti) { $arrlist = $this->link->getMulti($key); foreach ($key as $k) { !isset($arrlist[$k]) && $arrlist[$k] = FALSE; } return $arrlist; } else { foreach ($key as $k) { $arr = $this->link->get($k); $data[$k] = $arr; } return $data; } } else { $data = $this->link->get($key); return $data; } } public function set($key, $value, $life = 0) { if ($this->memcached) { return $this->link->set($key, $value, $life); } else { return $this->link->set($key, $value, 0, $life); } } public function update($key, $value) { $arr = $this->get($key); if ($arr !== FALSE) { is_array($arr) && is_array($value) && $arr = array_merge($arr, $value); return $this->set($key, $arr); } return 0; } public function delete($key) { return $this->link->delete($key); } public function truncate($pre = '') { return $this->link->flush(); } } ?><?php
 class redis_cache { public $conf; public $redis; public function __construct(&$conf) { $this->redis = false; $this->conf = $conf; if (extension_loaded('Redis')) { $this->redis = new Redis; } else { throw new Exception('Redis Extension not loaded.'); } if (!$this->redis) { throw new Exception('PHP.ini Error: Redis extension not loaded.'); } if ($this->redis->connect($this->conf['host'], $this->conf['port'])) { $this->conf['timeout'] && $this->redis->setOption(Redis::OPT_READ_TIMEOUT, $this->conf['timeout']); $this->redis->setOption(Redis::OPT_SERIALIZER, Redis::SERIALIZER_NONE); $this->redis->setOption(Redis::OPT_PREFIX, $this->conf['pre'] . ':'); isset($this->conf['table']) && $this->redis->select($this->conf['table']); return $this->redis; } else { $this->redis = false; throw new Exception('Can not connect to Redis host.'); } } public function init() { $bool = $this->redis === false ? false : true; return $bool; } public function __call($method, $params) { $redis = $this->redis; if (method_exists($redis, $method)) { switch (count($params)) { case 0: return $redis->$method(); case 1: return $redis->$method($params[0]); case 2: return $redis->$method($params[0], $params[1]); case 3: return $redis->$method($params[0], $params[1], $params[2]); case 4: return $redis->$method($params[0], $params[1], $params[2], $params[3]); case 5: return $redis->$method($params[0], $params[1], $params[2], $params[3], $params[4]); } } throw new Exception('RedisMethodNotExists[Method=' . $method . ']'); } public function key($key) { static $pre_len = -1; if ($pre_len == -1) { $pre_len = strlen($this->conf['pre']); } if (is_array($key)) { foreach ($key as $index => $k) { $key[$index] = $this->key($k); } return $key; } else { return $pre_len && strpos($key, $this->conf['pre']) === 0 ? substr($key, $pre_len) : $key; } } public function decode($value) { if (substr($value, 0, 2) == chr(6) . chr(2)) { $value = gzinflate(substr($value, 12, -8)); } return json_decode($value, 1); } public function encode($value) { $value = core::json_encode($value); return strlen($value) >= 512 ? chr(6) . chr(2) . gzencode($value) : $value; } public function get($key) { $key = $this->key($key); if (is_string($key)) { $res = $this->redis->get($key); $res = $this->decode($res); return $res; } else { $datas = $this->redis->mget($key); foreach ($datas as &$data) { $data = $this->decode($data); } return $datas; } } public function set($key, $val, $life = 0) { $key = $this->key($key); if ($life > 0) { $ret = $this->redis->setex($key, $life, $this->encode($val)); } else { $ret = $this->redis->set($key, $this->encode($val)); } return $ret; } public function update($key, $val) { $arr = $this->get($key); if ($arr !== FALSE) { is_array($arr) && is_array($val) && $arr = array_merge($arr, $val); return $this->set($key, $arr); } return FALSE; } public function delete($key) { $key = $this->key($key); return $this->redis->del($key); } public function truncate($pre = '') { return $this->redis->flushdb(); } } ?><?php
 class CACHE { private static $cache_type = ''; private static $cache_pre = ''; private static $cache_conf = array(); public static $instance = array(); public static function init_cache_config(&$conf) { self::$cache_conf = &$conf; } public static function instance($cache_name = '') { static $default_cache = NULL; if ($default_cache && !$cache_name) { $cache_name = $default_cache; } if (is_null($default_cache) || !isset(self::$instance[$cache_name])) { foreach (self::$cache_conf as $type => $conf) { if (is_null($default_cache)) { $default_cache = $type; !$cache_name && $cache_name = $type; } if ($cache_name != $type) { continue; } $cache_enigne = $type . '_cache'; self::$cache_type = $type; self::$cache_pre = isset($conf['pre']) ? $conf['pre'] : ''; self::$instance[$cache_name] = new $cache_enigne($conf); if (self::$instance[$cache_name]->init()) { return self::$instance[$cache_name]; } self::$instance[$cache_name] = false; break; } } return self::$instance[$cache_name]; } public static function key($key) { if (is_array($key)) { foreach ($key as &$k) { $k = self::key($k); } } else { $key = self::$cache_pre . $key; } return $key; } public static function opened($cache_name = '') { if (!isset(self::$instance[$cache_name])) { $instance = self::instance($cache_name); } else { $instance = &self::$instance[$cache_name]; } return $instance !== false; } public static function get($key) { if (DEBUG) { $_SERVER['cache']['get'][] = $key; } return call_user_func(array(self::instance(), 'get'), self::key($key)); } public static function set($key, $val, $expire = 0) { if (DEBUG) { $_SERVER['cache']['set'][] = func_get_args(); } return call_user_func(array(self::instance(), 'set'), self::key($key), $val, $expire); } public static function update($key, $val, $expire) { if (DEBUG) { $_SERVER['cache']['update'][] = func_get_args(); } return call_user_func(array(self::instance(), 'update'), self::key($key), $val, $expire); } public static function delete($key) { if (DEBUG) { $_SERVER['cache']['delete'][] = func_get_args(); } return call_user_func(array(self::instance(), 'delete'), self::key($key)); } public static function truncate($pre = '') { if (DEBUG) { $_SERVER['cache']['truncate'][] = func_get_args(); } return call_user_func(array(self::instance(), 'truncate'), $pre); } public static function lock($key, $expire = 10000, $max_lock_count = 1000, $lock_step_time = 5000) { $key = '_lock_' . $key; $sleep_count = 0; !$lock_step_time && $lock_step_time = 5000; if (self::get($key)) { while (true) { usleep($lock_step_time); if (!self::get($key)) { break; } $sleep_count++; if ($max_lock_count && $max_lock_count <= $sleep_count) { return false; } } } self::set($key, 1, $expire); return true; } public static function unlock($key) { $key = '_lock_' . $key; return self::delete($key); } } ?><?php
 class cli_control extends base_control { function __construct(&$conf) { if (!core::is_cmd()) { exit('Access Denied'); } parent::__construct($conf); } } ?><?php
 class core { public static $conf = array(); public static $control = null; public static function P($key, $default = '') { $val = self::gpc($key, 'P'); return $val ? $val : $default; } public static function gpc($k, $var = 'G') { $type = 'str'; if (strpos($k, ':') !== false) { list($k, $type) = explode(':', $k); } switch ($var) { case 'G': $var = &$_GET; break; case 'P': $var = &$_POST; break; case 'C': $k = $_SERVER['cookie_pre'] . $k; $var = &$_COOKIE; break; case 'R': $var = isset($_GET[$k]) ? $_GET : (isset($_POST[$k]) ? $_POST : array()); break; case 'S': $var = &$_SERVER; break; } if (isset($var[$k])) { return $type == 'str' ? $var[$k] : self::get_gpc_value(strtolower($type), $var[$k]); } else { return NULL; } } public static function get_gpc_value($type, $value) { switch ($type) { case 'int': return (int)$value; case 'float': return (float)$value; case 'email': return preg_match("/^[\w\-\.]+@[\w\-\.]+(\.\w+)+$/", $value) ? $value : ''; case 'url': return preg_match('#^(https?://[^\'"\\\\<>:\s]+(:\d+)?)?([^\'"\\\\<>:\s]+?)*$#is', $value) ? $value : ''; case 'qq': $value = trim($value); return preg_match('#^\d+{5,18}$#', $value) ? $value : ''; case 'tel': $value = trim($value); return preg_match('#^[\d-]+$#', $value) ? $value : ''; case 'mobile': $value = trim($value); return preg_match('#^\d{11}$#', $value) ? $value : ''; case 'version': $value = trim($value); return preg_match('#^\d(\.\d+)+$#', $value) ? $value : ''; default: return $value; } } public static function C($key, $value = '__GET__', $time = -1, $path = '/', $domain = '', $httponly = FALSE) { if ($value === '__GET__') { return self::gpc($key, 'C'); } else { $key = $_SERVER['cookie_pre'] . $key; if ($time > 0) { $time = $_SERVER['time'] + $time; $_COOKIE[$key] = $value; } else { unset($_COOKIE[$key]); } if (!is_null($domain) && $domain == '' && $_SERVER['cookie_domain']) { $domain = $_SERVER['cookie_domain']; } if (defined('IN_WORKERMAN')) { return WorkermanProtocolsHttp::setcookie($key, $value, $time, $path, $domain, FALSE, $httponly); } else { return setcookie($key, $value, $time, $path, $domain, FALSE, $httponly); } } } public static function S($key, $default = '') { $val = self::gpc($key, 'S'); return $val ? $val : $default; } public static function addslashes(&$var) { if (is_array($var)) { foreach ($var as $k => &$v) { self::addslashes($v); } } else { $var = addslashes($var); } return $var; } public static function htmlspecialchars(&$var) { if (is_array($var)) { foreach ($var as $k => &$v) { $var[$k] = self::htmlspecialchars($v); } } else { $var = str_replace(array('&', '"', '<', '>'), array('&amp;', '&quot;', '&lt;', '&gt;'), $var); } return $var; } public static function urlencode($s) { $s = urlencode($s); return str_replace('-', '%2D', $s); } public static function urldecode($s) { return urldecode($s); } public static function json_decode($s) { return $s === FALSE ? FALSE : json_decode($s, 1); } public static function json_encode($data) { if (is_array($data) || is_object($data)) { $is_list = is_array($data) && (empty($data) || array_keys($data) === range(0, count($data) - 1)); if ($is_list) { $json = '[' . implode(',', array_map(array('core', 'json_encode'), $data)) . ']'; } else { $items = Array(); foreach ($data as $key => $value) $items[] = self::json_encode("$key") . ':' . self::json_encode($value); $json = '{' . implode(',', $items) . '}'; } } elseif (is_string($data)) { $string = '"' . addcslashes($data, "\\\"\n\r\t/" . chr(8) . chr(12)) . '"'; $json = ''; $len = strlen($string); for ($i = 0; $i < $len; $i++) { $char = $string[$i]; $c1 = ord($char); if ($c1 < 128) { $json .= ($c1 > 31) ? $char : sprintf("\\u%04x", $c1); continue; } $json .= $char; } } else { $json = strtolower(var_export($data, true)); } return $json; } public static function usedtime() { $usetime = microtime(1) - $_SERVER['starttime']; return round($usetime, 6) * 1000; } public static function runmem() { return memory_get_usage() - $_SERVER['start_memory']; } public static function ob_handle($s) { if (!empty($_SERVER['ob_stack'])) { $gzipon = array_pop($_SERVER['ob_stack']); } else { $gzipon = 0; } if (self::gpc('str_search', 'S')) { $s = str_replace(self::gpc('str_search', 'S'), self::gpc('str_replace', 'S'), $s); } if (self::gpc('reg_search', 'S')) { $s = preg_replace(self::gpc('reg_search', 'S'), self::gpc('reg_replace', 'S'), $s); } if (self::is_cmd()) { return $s; } $isfirst = count($_SERVER['ob_stack']) == 0; if ($gzipon && !ini_get('zlib.output_compression') && function_exists('gzencode') && strpos(self::gpc('HTTP_ACCEPT_ENCODING', 'S'), 'gzip') !== FALSE) { $s = gzencode($s, 5); $isfirst && header("Content-Encoding: gzip"); $isfirst && header("Content-Length: " . strlen($s)); } else { if (ini_get('zlib.output_compression')) { $isfirst && header("Content-Encoding: gzip"); } else { $isfirst && header("Content-Encoding: none"); $isfirst && header("Content-Length: " . strlen($s)); } } return $s; } public static function is_cmd() { if (php_sapi_name() == 'cli' && (empty($_SERVER['REMOTE_ADDR']) || $_SERVER['REMOTE_ADDR'] == 'unknown')) { return true; } else { return false; } } public static function rewrite_url($pre, $para, $ds = '_', $ext = '.htm') { global $conf; if ($pre) { $pre .= $ds; } $para = str_replace(array('&', '='), array($ds, '_'), $para); return '<a href="' . $conf['app_dir'] . $pre . $para . $ext . '"'; } public static function ob_end_clean() { !empty($_SERVER['ob_stack']) && count($_SERVER['ob_stack']) > 0 && ob_end_clean(); } public static function ob_clean() { !empty($_SERVER['ob_stack']) && count($_SERVER['ob_stack']) > 0 && ob_clean(); } public static function autoload_handle($classname) { $conf = &core::$conf; if (!class_exists($classname)) { $modelfile = self::model_file($conf, $classname); if ($modelfile) { include $modelfile; } } if (!class_exists($classname, false)) { throw new Exception('class ' . $classname . ' does not exists'); } return true; } public static function model_file($conf, $model) { $model_file = ''; foreach ($conf['model_path'] as &$path) { if (is_file($path . $model . '.class.php')) { $model_file = $path . $model . '.class.php'; break; } } return $model_file; } public static function model(&$conf, $model) { $model_data = $conf['model_map'][$model]; if (!$model_data) { return false; } if (is_string($model_data)) { if (class_exists($model_data)) { return new $model_data(); } return DB::T($model, $model_data); } throw new Exception('Not found model: ' . $model); } public static function process_urlrewrite(&$conf, &$s) { if ($conf['url_rewrite']) { static $init_replace = 0; static $reg_search = array(); static $reg_replace = array(); static $str_search = array(); static $str_replace = array(); static $app_dir_regex = ''; if (!$init_replace) { if (isset($conf['str_replace'])) { foreach ($conf['str_replace'] as $k => $v) { $str_search[] = $k; $str_replace[] = $v; } } if (isset($conf['reg_replace'])) { foreach ($conf['reg_replace'] as $k => $v) { $reg_search[] = $k; $reg_replace[] = $v; } } $app_dir_regex = preg_quote($conf['app_dir']); $init_replace = 1; } if (strpos($s, '?c=') !== false) { $rewrite_search = '#\<a href=\"(' . $app_dir_regex . ')?(?:index\.php)?\?c=(\w+)-(\w+)([^"]*?)\"#i'; $s = preg_replace_callback($rewrite_search, 'core::rewrite_callback', $s); } if ($str_search) { $s = str_replace($str_search, $str_replace, $s); } if ($reg_search) { $s = preg_replace($reg_search, $reg_replace, $s); } } } public static function rewrite_callback($matches) { $pre = $matches[2] . self::$conf['rewrite_info']['comma'] . $matches[3]; return self::rewrite(self::$conf['app_dir'], $pre, $matches[4], self::$conf['rewrite_info']['comma'], self::$conf['rewrite_info']['ext']); } public static function rewrite($path, $pre, $para, $ds = '_', $ext = '.htm', $tag = 1) { if ($pre) { $pre .= $ds; } if ($para[0] == '&') { $para = substr($para, 1); } if (substr($para, 0, 2) == 'a=') { $para = substr($para, 2); } $para = str_replace(array('&', '='), $ds, $para); list($para, $anchor) = explode('#', $para, 2); if (!$para) { $pre = substr($pre, 0, -1); } if ($tag) { return '<a href="' . $path . $pre . $para . $ext . ($anchor ? '#' . $anchor : '') . '"'; } else { return $path . $pre . $para . $ext . ($anchor ? '#' . $anchor : ''); } } public static function get_paths($path, $fullpath = FALSE) { $arr = array(); $df = opendir($path); while ($dir = readdir($df)) { if ($dir == '.' || $dir == '..' || $dir[0] == '.' || !is_dir($path . $dir)) continue; $arr[] = $fullpath ? $path . $dir . '/' : $dir; } sort($arr); return $arr; } public static function run(&$conf) { self::init($conf); $control = str_replace(array('.', '\\', '/'), '', self::R('c')); $control_class = $control . '_control'; $control_exists = class_exists($control_class, false); if (!$control_exists) { foreach ($conf['control_path'] as $control_dir) { $control_file = $control_dir . $control . '_control.class.php'; if (is_file($control_file)) { include $control_file; $control_exists = class_exists($control_class, false); break; } } } if (!$control_exists) { if ($conf['page_setting'][404]) { if (is_file(ROOT_PATH . $conf['page_setting'][404])) { include ROOT_PATH . $conf['page_setting'][404]; } else { $conf['page_setting'][404]($control); } exit; } throw new Exception("Invaild URL : {$control} control not exists."); } $controlclass = "{$control}_control"; self::$control = new $controlclass($conf); $onaction = "on_" . self::G('a'); if (method_exists(self::$control, $onaction) || method_exists(self::$control, '__call')) { self::$control->$onaction(); self::debug(); } else if (method_exists(self::$control, 'on_404')) { self::$control->on_404($onaction . ' method not exists.'); } else { throw new Exception("Invaild URL : $onaction method not exists."); } unset($newcontrol, $control, $action); } public static function init(&$conf) { self::init_conf_by_domain($conf); self::$conf = &$conf; self::init_timezone($conf); self::init_supevar($conf); self::init_set(); self::init_handle(); DB::init_db_config($conf['db']); if (isset($conf['cache']) && $conf['cache']) { CACHE::init_cache_config($conf['cache']); } if (get_magic_quotes_gpc()) { self::stripslashes($_GET); self::stripslashes($_POST); self::stripslashes($_COOKIE); } if (self::is_cmd()) { ob_implicit_flush(1); } else { self::ob_start(isset($conf['gzip']) && $conf['gzip'] ? $conf['gzip'] : false); } } public static function init_conf_by_domain(&$conf) { static $domain_conf = array(); static $origin_conf = array(); if (!$origin_conf) { $origin_conf = $conf; } if (!isset($_SERVER['HTTP_HOST']) || !$_SERVER['HTTP_HOST'] || !isset($conf['domain_path']) || !$conf['domain_path']) { return; } $host = preg_replace('#(\:\d+$|[^a-zA-Z\d\-\.]+)#is', '', $_SERVER['HTTP_HOST']); if (!isset($domain_conf[$host])) { $domain_file = $conf['domain_path'] . $host . '.php'; if (is_file($domain_file)) { $domain_conf[$host] = include($domain_file); } else { $domain_conf[$host] = array(); } } if (isset($domain_conf[$host]['get'])) { $_GET = array_merge($_GET, $domain_conf[$host]['get']); $_REQUEST = array_merge($_REQUEST, $domain_conf[$host]['get']); } if (isset($domain_conf[$host]['post'])) { $_POST = array_merge($_POST, $domain_conf[$host]['post']); $_REQUEST = array_merge($_REQUEST, $domain_conf[$host]['post']); } $conf = array_merge($origin_conf, $domain_conf[$host]); } public static function init_timezone($conf = array()) { if (!empty($conf['timeoffset'])) { $zones = array( '-12' => 'Kwajalein', '-11' => 'Pacific/Midway', '-10' => 'Pacific/Honolulu', '-9' => 'America/Anchorage', '-8' => 'America/Los_Angeles', '-7' => 'America/Denver', '-6' => 'America/Tegucigalpa', '-5' => 'America/New_York', '-4' => 'America/Halifax', '-3' => 'America/Sao_Paulo', '-2' => 'Atlantic/South_Georgia', '-1' => 'Atlantic/Azores', '0' => 'Europe/Dublin', '+1' => 'Europe/Belgrade', '+2' => 'Europe/Minsk', '+3' => 'Asia/Tehran', '+4' => 'Asia/Muscat', '+5' => 'Asia/Katmandu', '+6' => 'Asia/Rangoon', '+7' => 'Asia/Krasnoyarsk', '+8' => 'Asia/Shanghai', '+9' => 'Australia/Darwin', '+10' => 'Australia/Canberra', '+11' => 'Asia/Magadan', '+12' => 'Pacific/Fiji', '+13' => 'Pacific/Tongatapu', ); if (isset($zones[$conf['timeoffset']])) { date_default_timezone_set($zones[$conf['timeoffset']]); } } } public static function header($string, $code = 0) { if (defined('IN_WORKERMAN')) { if ($code && isset(WorkermanProtocolsHttpCache::$codes[$code])) { $header = sprintf('HTTP/1.1 %s %s', $code, WorkermanProtocolsHttpCache::$codes[$code]); WorkermanProtocolsHttp::header($header); } WorkermanProtocolsHttp::header($string); } else if (!self::is_cmd()) { header($string); } } public static function init_supevar(&$conf) { $_SERVER['starttime'] = microtime(1); $starttime = explode(' ', $_SERVER['starttime']); $_SERVER['time'] = isset($_SERVER['REQUEST_TIME']) ? $_SERVER['REQUEST_TIME'] : $starttime[1]; $_SERVER['ip'] = isset($_SERVER['REMOTE_ADDR']) ? $_SERVER['REMOTE_ADDR'] : ''; $_SERVER['sqls'] = array(); $_SERVER['app_url'] = $conf['app_url']; $_SERVER['cookie_pre'] = $conf['cookie_pre']; $_SERVER['cookie_domain'] = $conf['cookie_domain']; if (function_exists('memory_get_usage')) { $_SERVER['start_memory'] = memory_get_usage(); } if (isset($_SERVER['X-Requested-With']) && $_SERVER['X-Requested-With']) { $_REQUEST['ajax'] = 1; $_GET['ajax'] = 1; $_POST['ajax'] = 1; } (!isset($_SERVER['REQUEST_URI']) || (isset($_SERVER['HTTP_X_REWRITE_URL']) && $_SERVER['REQUEST_URI'] != $_SERVER['HTTP_X_REWRITE_URL'])) && self::fix_iis_request(); self::init_get($conf); } private static function fix_iis_request() { if (isset($_SERVER['HTTP_X_REWRITE_URL'])) { $_SERVER['REQUEST_URI'] = &$_SERVER['HTTP_X_REWRITE_URL']; } else if (isset($_SERVER['HTTP_REQUEST_URI'])) { $_SERVER['REQUEST_URI'] = &$_SERVER['HTTP_REQUEST_URI']; } else { if (isset($_SERVER['SCRIPT_NAME'])) { $_SERVER['HTTP_REQUEST_URI'] = $_SERVER['SCRIPT_NAME']; } else { $_SERVER['HTTP_REQUEST_URI'] = $_SERVER['PHP_SELF']; } if (isset($_SERVER['QUERY_STRING'])) { $_SERVER['REQUEST_URI'] = '?' . $_SERVER['QUERY_STRING']; } else { $_SERVER['REQUEST_URI'] = ''; } } } private static function init_get(&$conf) { global $argv, $argc; $get = &$_GET; $query = explode('?', self::gpc('REQUEST_URI', 'S'), 2); if (isset($query[1])) { parse_str($query[1], $queryget); $get = array_merge($get, $queryget); } if ($conf['url_rewrite'] && isset($get['rewrite'])) { if ($conf['rewrite_info']['ext']) { $get['rewrite'] = preg_replace('#' . preg_quote($conf['rewrite_info']['ext']) . '$#i', '', $get['rewrite']); } $url_sp = ''; if (strpos($get['rewrite'], '/') !== false) { } elseif (strpos($get['rewrite'], '_') !== false) { $url_sp = '_'; } elseif (strpos($get['rewrite'], '-') !== false) { $url_sp = '-'; } $url_sp && $get['rewrite'] = str_replace($url_sp, '/', $get['rewrite']); $get['rewrite'] = preg_replace('/^\//is', '', $get['rewrite']); $rws = explode('/', $get['rewrite']); if (isset($rws[0])) { $rw_count = count($rws); for ($rw_i = 0; $rw_i < $rw_count; $rw_i = $rw_i + 2) { $key = $rws[$rw_i]; $pos = strpos($key, '['); if ($pos !== false) { $index_key = substr($key, 0, $pos); if (!$index_key) { continue; } if (!isset($get[$index_key])) { $get[$index_key] = array(); } $arr = substr($key, $pos); preg_match_all('#\[([\w]*)\]#is', $arr, $array_match); $array_point = &$get[$index_key]; foreach ($array_match[1] as $array_index => $value) { if (!$value) { $value = 0; } !isset($array_point[$value]) && $array_point[$value] = array(); $array_point = &$array_point[$value]; } $array_point = $rws[$rw_i + 1]; } else { $get[$key] = empty($rws[$rw_i + 1]) ? '' : $rws[$rw_i + 1]; } } } unset($get['rewrite']); } if ($argc == 2) { parse_str($argv[1], $get); } $tmpval = isset($get['c']) ? $get['c'] : (isset($argv[1]) ? $argv[1] : ''); $tmppos = strpos($tmpval, '-'); if ($tmppos !== false) { $tmpact = substr(strstr($tmpval, '-'), 1); $tmpval = substr($tmpval, 0, $tmppos); } else { $tmpact = isset($get['a']) ? $get['a'] : (isset($argv[2]) ? $argv[2] : ''); } $get['c'] = $tmpval && preg_match("/^\w+$/", $tmpval) ? $tmpval : 'index'; $get['a'] = $tmpact && preg_match("/^\w+$/", $tmpact) ? $tmpact : 'index'; $_REQUEST = array_merge($get, $_REQUEST); } public static function ip($format = 0) { if (!isset($_SERVER['IP']) || empty($_SERVER['IP'])) { $server_addr = self::gpc('REMOTE_ADDR', 'S'); if (isset(core::$conf['ip_x_forward']) && core::$conf['ip_x_forward'] && getenv('HTTP_X_FORWARDED_FOR') && strcasecmp(getenv('HTTP_X_FORWARDED_FOR'), 'unknown')) { $_SERVER['IP'] = getenv('HTTP_X_FORWARDED_FOR'); } elseif (getenv('REMOTE_ADDR') && strcasecmp(getenv('REMOTE_ADDR'), 'unknown')) { $_SERVER['IP'] = getenv('REMOTE_ADDR'); } elseif ($server_addr && strcasecmp($server_addr, 'unknown')) { $_SERVER['IP'] = $server_addr; } else { $_SERVER['IP'] = ''; } preg_match("/[\d\.]{7,15}/", $_SERVER['IP'], $ipmatches); $_SERVER['IP'] = isset($ipmatches[0]) && $ipmatches[0] ? $ipmatches[0] : 'unknown'; $_SERVER['REMOTE_ADDR'] = &$_SERVER['IP']; } if ($format) { $ips = explode('.', $_SERVER['IP']); for ($i = 0; $i < 3; $i++) { $ips[$i] = intval($ips[$i]); } return sprintf('%03d%03d%03d', $ips[0], $ips[1], $ips[2]); } else { return $_SERVER['IP']; } } public static function init_set() { if (DEBUG && !core::is_cmd()) { debug::init(); } else { error_reporting(E_ALL & ~E_STRICT & ~E_NOTICE & ~E_WARNING & ~E_DEPRECATED); } } public static function init_handle() { spl_autoload_register(array('core', 'autoload_handle')); if (DEBUG || self::gpc('ajax', 'R')) { } } public static function stripslashes(&$var) { if (is_array($var)) { foreach ($var as $k => &$v) { self::stripslashes($v); } } else { $var = stripslashes($var); } return $var; } public static function ob_start($gzip = TRUE) { if ($gzip) { !isset($_SERVER['ob_stack']) && $_SERVER['ob_stack'] = array(); array_push($_SERVER['ob_stack'], $gzip); } ob_start($gzip ? array('core', 'ob_handle') : 0); } public static function R($key, $default = '') { $val = self::gpc($key, 'R'); return $val ? $val : $default; } public static function G($key, $default = '') { $val = self::gpc($key, 'G'); return $val ? $val : $default; } public static function debug() { if (self::is_cmd() || core::R('ajax')) return; if (defined('NO_DEBUG_INFO')) return; if (DEBUG || (defined('DEBUG_INFO') && DEBUG_INFO)) { debug::process(); } } public static function is_windows() { return strtoupper(substr(PHP_OS, 0, 3)) === 'WIN'; } public static function error_handler($e) { echo '<html><head>' . '<meta content="text/html; charset=utf-8" http-equiv="Content-Type">' . '<title>System Error</title>' . '</head><body>' . '<h1>' . $e['message'] . '</h1>' . 'System Error:' . print_R($e, 1) . '</body></html>'; exit; } } class C extends core { } if (!function_exists('class_alias')) { function class_alias($original, $alias) { if (class_exists($alias)) { return true; } if (!class_exists($original)) { eval('abstract class ' . $alias . ' extends ' . $original . '{}'); } return true; } } ?><?php
 class DB { private static $db_type; private static $db_conf; private static $db_table_pre; private static $instance = NULL; public static function init_db_config(&$conf) { self::$db_conf = $conf; } public static function instance() { if (is_null(self::$instance)) { foreach (self::$db_conf as $type => $conf) { $db_enigne = $type . '_db'; self::$db_type = $type; self::$db_table_pre = isset($conf['tablepre']) ? $conf['tablepre'] : ''; self::$instance = new $db_enigne($conf); break; } } return self::$instance; } public static function table($table) { self::instance(); return (self::$db_table_pre) . $table; } public static function query($sql, $fetch = 0) { $query = self::instance()->query($sql); if ($fetch) { return self::fetch($query); } else { return $query; } } public static function fetch($query) { return self::instance()->fetch_array($query); } public static function fetch_all($query, $index = '') { if (is_string($query)) { $query = self::query($query); } return self::instance()->fetch_all($query, $index); } public static function fetch_array($query) { return self::fetch($query); } public static function select($table, $where, $order = array(), $perpage = -1, $page = 1, $index = '') { if (strpos($table, ':') === false) { $fields = '*'; } else { list($table, $fields) = explode(':', $table); } if ($perpage == -2) { $fields = 'count(*) AS C'; } $result = self::instance()->select(self::table($table), $where, $order, $perpage, $page, $fields, $index); if ($perpage == -2) { return $result[0]['C']; } else { return $result; } } public static function insert($table, $data, $return_id = 0) { return self::instance()->insert(self::table($table), $data, $return_id); } public static function replace($table, $data) { return self::instance()->replace(self::table($table), $data); } public static function update($table, $data, $where) { return self::instance()->update(self::table($table), $data, $where); } public static function delete($table, $where) { return self::instance()->delete(self::table($table), $where); } public static function affected_rows() { return self::instance()->affected_rows(); } public static function T($table, $primary_key = 'id') { static $models = array(); $index = self::$db_table_pre . $table; if (!$models[$index]) { $models[$index] = new base_model($table, $primary_key); } else { if ($models[$index]->primary_key != $primary_key) { $models[$index]->primary_key = $primary_key; } } return $models[$index]; } } ?><?php
 class template { static $plugin_loaded = array(); public $conf = array(); private $vars = array(); public $force = 5; private $var_regexp = "\@?\\\$[a-zA-Z_]\w*(?:\[[\w\.\"\'\-\$]+\])*"; private $vtag_regexp = "\<\?=(\@?\\\$[a-zA-Z_]\w*(?:\[[\w\.\"\'\[\]\$]+\])*)\?\>"; private $const_regexp = "\{([\w]+)\}"; private $eval_regexp = "#(?:<!--\{(eval))\s+?(.*?)\s*\}-->#is"; private $tag_search = array(); private $tag_replace = array(); private $sub_tpl = array(); function __construct() { } public function assign($k, &$v) { $this->vars[$k] = &$v; } public function assign_value($k, $v) { $this->vars[$k] = $v; } public function show(&$conf, $file, $makefile = '', $charset = '', $compress = 6, $by_return = 0) { $this->set_conf($conf); return $this->display($file, $makefile, $charset, $compress, $by_return); } public function set_conf(&$conf) { $this->conf = &$conf; if (!defined('DIR')) { define('DIR', $conf['app_dir']); } if (!defined('CDN')) { define('CDN', $conf['static_url']); } VI::assign('conf', $conf); } public function display($file, $makefile = '', $charset = '', $compress = 6, $by_return = 0) { extract($this->vars, EXTR_SKIP); $_SERVER['warning_info'] = ob_get_contents(); if ($_SERVER['warning_info']) { ob_end_clean(); } ob_start(); include $this->get_compile_tpl($file); $body = ob_get_contents(); ob_end_clean(); core::process_urlrewrite($this->conf, $body); $is_xml = strpos($file, '.xml') !== false ? true : false; if ($charset && $charset != 'utf-8') { header('Content-Type: text/' . ($is_xml ? 'xml' : 'html') . '; charset=' . $charset); $body = mb_convert_encoding($body, $charset, 'utf-8'); } if (!DEBUG && !$this->conf['html_no_compress']) { $this->compress_html($body); } if ($makefile) { if ($compress) { $save_body = gzencode($body, $compress); } else { $save_body = $body; } if (substr($makefile, 0, 6) == 'CACHE:') { list(, , $key, $time) = explode(':', $makefile); $cache_data = array( 'body' => $save_body, 'time' => $time, ); CACHE::set($key, $cache_data, $time); } else { $dir = dirname($makefile); !is_dir($dir) && mkdir($dir, 0755, 1); file_put_contents($makefile, $save_body); } } core::ob_start(isset($this->conf['gzip']) && $this->conf['gzip'] ? $this->conf['gzip'] : false); if ($by_return) { if ($by_return == 2) { echo $body; } return $body; } echo $body; } public function get_complie_name(&$filename) { if (strpos($filename, '.') === false) { $filename .= '.htm'; } $fix_filename = strtr($filename, array('/' => '#', '\\' => '#', ':' => '#')); $obj_file = $this->conf['tmp_path'] . (isset($this->conf['tpl_prefix']) ? $this->conf['tpl_prefix'] : $this->conf['app_id']) . '_view_' . $fix_filename . '.php'; return $obj_file; } public function get_compile_tpl($filename) { $obj_file = $this->get_complie_name($filename); if (!$this->force) return $obj_file; $exists_file = is_file($obj_file); $file = ''; if (is_file($filename)) { $file = $filename; } else { foreach ($this->conf['view_path'] as $path) { if (is_file($path . $filename)) { $file = $path . $filename; break; } } } if (empty($file)) { if ($exists_file) { return $obj_file; } throw new Exception("template not found: $filename"); } $file_mtime_old = $file_mtime = 0; if ($exists_file) { $file_mtime = filemtime($file); if (!$file_mtime) { throw new Exception("template stat error: $filename "); } $file_mtime_old = $exists_file ? filemtime($obj_file) : 0; } if (!$exists_file || $file_mtime_old < $file_mtime || DEBUG > 0) { !is_dir($this->conf['tmp_path']) && mkdir($this->conf['tmp_path'], 0755, 1); $this->compile($file, $obj_file); } return $obj_file; } public function compile($view_file, $obj_file) { $this->sub_tpl = array(); $s = file_get_contents($view_file); for ($i = 0; $i < 4; $i++) { $s = preg_replace_callback("#<!--{template\s+([^}]*?)}-->#i", array($this, 'get_tpl'), $s); } if (!empty($this->conf['tpl']['plugins'])) { foreach ($this->conf['tpl']['plugins'] as $plugin => $plugin_file) { if (!isset(self::$plugin_loaded[$plugin])) { include $plugin_file; if (class_exists($plugin, 0)) { self::$plugin_loaded[$plugin] = new $plugin($this->conf); } else { self::$plugin_loaded[$plugin] = 0; } } self::$plugin_loaded[$plugin] && self::$plugin_loaded[$plugin]->process($s); } } $this->compile_block($s); $s = preg_replace("#(\{" . $this->var_regexp . "\}|" . $this->var_regexp . ")#i", "<?=\\1?>", $s); if (strpos($s, '<?={') !== false) { $s = preg_replace("#\<\?={(.+?)}\?\>#", "<?=\\1?>", $s); } $s = preg_replace_callback("#\<\?=(\@?\\\$[a-zA-Z_]\w*)((\[[^\]]+\])+)\?\>#is", array($this, 'array_index'), $s); for ($i = 0; $i < 4; $i++) { $s = preg_replace_callback("#\{loop\s+$this->vtag_regexp\s+$this->vtag_regexp\s+$this->vtag_regexp\}(.+?)\{\/loop\}#is", array($this, 'loop_section'), $s); $s = preg_replace_callback("#\{loop\s+$this->vtag_regexp\s+$this->vtag_regexp\}(.+?)\{\/loop\}#is", array($this, 'loop_section'), $s); } $s = preg_replace_callback("#\{(if|elseif)\s+(.*?)\}#is", array($this, 'stripvtag_callback'), $s); $s = preg_replace("#\{else\}#is", "<?}else { ?>", $s); $s = preg_replace("#\{\/(if)\}#is", "<?}?>", $s); $s = preg_replace("#\{\/(block)\}#is", "<?}}?>", $s); $s = preg_replace("#" . $this->const_regexp . "#", "<?=\\1?>", $s); $s = preg_replace_callback("#\<\?=\@(\\\$[a-zA-Z_]\w*)((\[[\\$\[\]\w\']+\])+)\?\>#is", array($this, 'array_keyexists'), $s); if ($this->tag_search) { $s = str_replace($this->tag_search, $this->tag_replace, $s); if (strpos($s, '<!--[') !== false) { $s = str_replace($this->tag_search, $this->tag_replace, $s); } } if ($this->conf['static_url']) { $s = preg_replace('#([\'"])static\/(\w*)/#i', '\\1' . $this->conf['static_url'] . '\\2/', $s); } $s = "<?php !defined('ROOT_PATH') && exit('Access Denied');" . "\$this->sub_tpl_check('" . implode('|', $this->sub_tpl) . "', '{$_SERVER['starttime']}', '$view_file', '$obj_file');?>$s"; file_put_contents($obj_file, $s); return true; } private function compile_block(&$s) { $s = preg_replace_callback($this->eval_regexp, array($this, 'stripvtag_callback'), $s); $s = preg_replace("#<!--\#(.+?)-->#s", "", $s); $s = preg_replace("#<!--{(.+?)}-->#s", "{\\1}", $s); $s = preg_replace_callback("#{block\s+(\w+[^\r\n]+)}#is", array($this, 'blocktag_callback'), $s); $s = preg_replace_callback('#{([\w\:]+\([^}]*?\);?)}#is', array($this, 'funtag_callback'), $s); } private function compress_html(&$html_source) { $keep_tag = array('pre', 'textarea', 'script', 'style', 'code'); $special_tags = array(); if (strpos($html_source, '<!--[if') !== false) { preg_match_all('#<!--\[if[\s\S]*?endif\]-->#is', $html_source, $special_tags); foreach ($special_tags as $k => $v) { $html_source = str_replace($v[0], '[[special-tag' . $k . ']]', $html_source); } } if (strpos($html_source, '<!--') !== false) { $html_source = preg_replace('#<!--[\s\S]*?-->#is', '', $html_source); } $chunks = preg_split('#(<(' . implode('|', $keep_tag) . ')[\s\S]*?<\/\2>)#is', $html_source, -1, PREG_SPLIT_DELIM_CAPTURE); $compress_html_source = ''; $skip = 0; foreach ($chunks as $index => $c) { if ($skip) { $skip = 0; continue; } $skip = 0; foreach ($keep_tag as $tag) { if (stripos($c, '<' . $tag) !== false) { $skip = 1; break; } } if (stripos($c, '<script') !== false) { while (strpos($c, "\r") !== false) { $c = str_replace("\r", "\n", $c); } $c = preg_replace('#\\n[\\t ]+#is', "\n", $c); $c = preg_replace('#[\\t ]{2,}#is', ' ', $c); $c = preg_replace('#\/\*[\s\S]*?\*\/#is', '', $c); while (strpos($c, "\n\n") !== false) { $c = str_replace("\n\n", "\n", $c); } } elseif (stripos($c, '<style') !== false) { $this->css_compress($c); } else if (!$skip) { while (strpos($c, "\r") !== false) { $c = str_replace("\r", "\n", $c); } while (strpos($c, "\n\n") !== false) { $c = str_replace("\n\n", "\n", $c); } $c = preg_replace('#>[\n\s]+<(/?\w)#is', '><$1', $c); $c = preg_replace('#\\n[\\t ]+#is', " ", $c); $c = preg_replace('#[\\t ]{2,}#', ' ', $c); while (strpos($c, "\n\n") !== false) { $c = str_replace("\n\n", "\n", $c); } } $compress_html_source .= trim($c); } if ($special_tags) { foreach ($special_tags as $k => $v) { $compress_html_source = str_replace('[[special-tag' . $k . ']]', $v[0], $compress_html_source); } } $html_source = $compress_html_source; } function css_compress(&$css_body) { $css_body = preg_replace('!/\*[^*]*\*+([^/][^*]*\*+)*/!', '', $css_body); $css_body = preg_replace('/\s*([{}|:;,])\s+/', '$1', $css_body); $css_body = preg_replace('/\s\s+(.*)/', '$1', $css_body); $css_body = str_replace(';}', '}', $css_body); } function sub_tpl_check($sub_files, $make_time, $tpl, $obj_file) { if ($this->force && mt_rand(1, $this->force) == 1) { $sub_files = explode('|', $sub_files); foreach ($sub_files as $tpl_file) { $sub_make_time = @filemtime($tpl_file); if ($sub_make_time && $sub_make_time > $make_time) { $this->compile($tpl, $obj_file); break; } } } } public function get_tpl($filename) { if (!isset($filename[1])) { return ''; } $filename = $filename[1]; if (strpos($filename, '.') === false) { $filename .= '.htm'; } foreach ($this->conf['view_path'] as $path) { if (is_file($path . $filename)) { $file = $path . $filename; $this->sub_tpl[$file] = $file; return file_get_contents($file); break; } } return ''; } private function array_index($matches) { $name = $matches[1]; $items = $matches[2]; if (strpos($items, '$') === FALSE) { $items = preg_replace("#\[([\$a-zA-Z_][\w\$]*)\]#is", "['\\1']", $items); } else { $items = preg_replace("#\[([\$a-zA-Z_][\w\$]*)\]#is", "[\"\\1\"]", $items); } return '<?=' . $name . $items . '?>'; } private function array_keyexists($name, $items) { return "<? echo isset($name$items)?$name$items:'';?>"; } private function stripvtag_callback($matchs) { $pre = $matchs[1]; $s = $matchs[2]; switch ($pre) { case 'eval': $s = '<? ' . $s . '?' . '>'; $search = '<!--[eval=' . count($this->tag_search) . ']-->'; $this->tag_search[] = $search; $this->tag_replace[] = $this->stripvtag($s); return $search; break; case 'elseif': $s = '<? } elseif(' . $s . ') { ?>'; break; case 'if': $s = '<? if(' . $s . ') { ?>'; break; } return $this->stripvtag($s); } private function stripvtag($s, $instring = FALSE) { if (strpos($s, '<? echo isset') !== false) { $s = preg_replace('#<\? echo isset\((.*?)\) \? (\\1) : \'\';\?>#is', $instring ? '{\\1}' : '\\1', $s); } return preg_replace("/" . $this->vtag_regexp . "/is", "\\1", str_replace("\\\"", '"', $s)); } private function striptag_callback($matches) { if (trim($matches[2]) == '') { return $matches[0]; } else { if (stripos($matches[1], ' type="tpl"') !== false) { return $matches[0]; } $search = '<!--[script=' . count($this->tag_search) . ']-->'; $this->tag_search[] = $search; $matches[0] = preg_replace('#(//[^\'";><]*$|/\*[\s\S]*?\*/)#im', '', $matches[0]); $matches[0] = preg_replace('#{((?:\$[\w\[\]]+)|(?:[A-Z_]+))}#s', '<' . '?php echo $1;?' . '>', $matches[0]); $this->tag_replace[] = $matches[0]; return $search; } } private function funtag_callback($matchs) { $search = '<!--[func=' . count($this->tag_search) . ']-->'; $this->tag_search[] = $search; $this->tag_replace[] = '<? if(false !== ($_val=' . $matchs[1] . '))echo $_val;?>'; return $search; } private function blocktag_callback($matchs) { $search = '<!--[block=' . count($this->tag_search) . ']-->'; $func = 'block_' . $matchs[1]; $this->tag_search[] = $search; $this->tag_replace[] = '<? if(!function_exists(\'' . substr($func, 0, strpos($func, '(')) . '\')){function ' . $func . '{?>'; return $search; } private function loop_section($matchs) { if (isset($matchs[4])) { $arr = $matchs[1]; $k = $matchs[2]; $v = $matchs[3]; $statement = $matchs[4]; } else { $arr = $matchs[1]; $k = ''; $v = $matchs[2]; $statement = $matchs[3]; } $arr = $this->stripvtag($arr); $k = $this->stripvtag($k); $v = $this->stripvtag($v); $statement = str_replace("\\\"", '"', $statement); return $k ? "<? if(!empty($arr)) { foreach($arr as $k=>&$v) {?>$statement<? }}?>" : "<? if(!empty($arr)) { foreach($arr as &$v) {?>$statement<? }} ?>"; } } ?><?php
 class VI { private static $instance = NULL; public static function instance() { static $inited = 0;; if (!$inited) { self::$instance = new template(); $inited = 1; } return self::$instance; } public static function reset() { unset(self::$instance); self::$instance = new template(); } public static function assign($var, &$val) { self::instance()->assign($var, $val); } public static function assign_value($var, $val) { self::instance()->assign_value($var, $val); } public static function display($control, $template, $makefile = '', $charset = '', $gzcompress = 6, $by_return = 0) { return self::instance()->show($control->conf, $template, $makefile, $charset, $gzcompress, $by_return); } } ?><?php
 class mysql_db { var $queries = 0; var $charset; var $conf = array(); function __construct(&$db_conf) { if (!function_exists('mysql_connect')) { throw new Exception('mysql extension was not installed!'); } $this->conf = $db_conf; } public function __get($var) { if ($var == 'write_link') { if (isset($this->conf['master'])) { $conf = $this->conf['master']; } else { $conf = $this->conf; } empty($conf['engine']) && $conf['engine'] = ''; $this->write_link = $this->connect($conf, 'master'); return $this->write_link; } else if ($var == 'read_link') { $slave_count = count($this->conf['slaves']); if (!$slave_count) { $this->read_link = $this->write_link; return $this->read_link; } $slaves = $this->conf['slaves']; $slave = $slaves[rand(0, $slave_count - 1)]; empty($slave['engine']) && $slave['engine'] = ''; $this->read_link = $this->connect($slave, 'slave'); return $this->read_link; } } function connect(&$db_conf, $server = '') { if (isset($db_conf['pconnect']) && $db_conf['pconnect']) { $link = mysql_pconnect($db_conf['host'], $db_conf['user'], $db_conf['pass']); } else { $link = mysql_connect($db_conf['host'], $db_conf['user'], $db_conf['pass'], 1); } if (!$link) { throw new Exception('[mysql]Can not connect to MySQL server, error=' . $this->errno() . ':' . $this->error()); } if (strtoupper($db_conf['engine']) == 'INNODB') { $this->query("SET innodb_flush_log_at_trx_commit=no", '', $link); } $version = $this->version($link); if ($version > '4.1') { if (isset($db_conf['charset'])) { $this->query("SET character_set_connection={$db_conf['charset']}, character_set_results={$db_conf['charset']}, character_set_client=binary", '', $link); } if ($version > '5.0.1') { $this->query("SET sql_mode=''", '', $link); } } $this->select_db($db_conf['name'], $link); return $link; } function select_db($dbname, $link) { return mysql_select_db($dbname, $link); } function get_link($sql) { return $this->is_slave($sql) ? $this->read_link : $this->write_link; } function is_slave($sql) { $slave_array = array('sele', 'set ', 'show'); return in_array(strtolower(substr($sql, 0, 4)), $slave_array); } function exec($sql) { $link = $this->get_link($sql); return mysql_query($sql, $link); } function query($sql, $type = '', $link = false) { if (DEBUG) { $sqlendttime = 0; $mtime = explode(' ', microtime()); $sqlstarttime = number_format(($mtime[1] + $mtime[0] - $_SERVER['starttime']), 6) * 1000; } static $unbuffered_exists = NULL; if ($type == 'UNBUFFERED' && $unbuffered_exists == NULL) { $unbuffered_exists = function_exists('mysql_unbuffered_query') ? 1 : 0; } $func = ($type == 'UNBUFFERED' && $unbuffered_exists) ? 'mysql_unbuffered_query' : 'mysql_query'; $link = $link ? $link : $this->get_link($sql); $query = $func($sql, $link); if ($query === false) { throw new Exception('MySQL Query Error, error=' . $this->errno($link) . ':' . $this->error($link) . "\r\n" . (DEBUG ? $sql : '')); } if (DEBUG) { $mtime = explode(' ', microtime()); $sqlendttime = number_format(($mtime[1] + $mtime[0] - $_SERVER['starttime']), 6) * 1000; $sqltime = round(($sqlendttime - $sqlstarttime), 3); $explain = array(); $info = mysql_info(); if ($query && preg_match("/^(select )/i", $sql)) { $explain = mysql_fetch_assoc(mysql_query('EXPLAIN ' . $sql, $link)); } $sql = ($this->is_slave($sql) ? '[slave]' : '[master]') . $sql; $_SERVER['sqls'][] = array('sql' => $sql, 'type' => 'mysql', 'time' => $sqltime, 'info' => $info, 'explain' => $explain); } $this->queries++; return $query; } function fetch_array($query, $result_type = MYSQL_ASSOC) { return mysql_fetch_array($query, $result_type); } function fetch_all($query, $index = '') { $list = array(); while ($val = $this->fetch_array($query)) { if ($index) { $list[$val[$index]] = $val; } else { $list[] = $val; } } return $list; } function affected_rows() { return mysql_affected_rows($this->write_link); } function error($link) { return ($link ? mysql_error($link) : mysql_error()); } function errno($link) { return intval($link ? mysql_errno($link) : mysql_errno()); } function result($query, $row = 0) { $query = @mysql_result($query, $row); return $query; } function free_result($query) { return mysql_free_result($query); } function insert_id() { $link = $this->write_link; return ($id = mysql_insert_id($link)) >= 0 ? $id : $this->result($this->query("SELECT last_insert_id()", '', $link), 0); } function fetch_fields($query) { return mysql_fetch_field($query); } function version($link) { return mysql_get_server_info($link); } function close($link) { return mysql_close($link); } function select($table, $where, $order = array(), $perpage = -1, $page = 1, $fields = array(), $index = '') { $where_sql = $this->build_where_sql($where); $selectsql = '*'; if (is_array($fields)) { $selectsql = implode(',', $fields); } else { $selectsql = $fields; } $start = ($page - 1) * $perpage; $fetch_first = $perpage == 0 ? true : false; $fetch_all = $perpage == -1 ? true : false; $fetch_count = $perpage == -2 ? true : false; $limit_sql = ''; if (!$fetch_first && !$fetch_all && !$fetch_count) { $limit_sql = ' LIMIT ' . $start . ',' . $perpage; } $order_sql = ''; if ($order) { $order_sql = $this->build_order_sql($order); } $sql = 'SELECT ' . $selectsql . ' FROM ' . $table . $where_sql . $order_sql . $limit_sql; $query = $this->query($sql);; if ($fetch_first) { return $this->fetch_array($query); } else { return $this->fetch_all($query, $index); } } function insert($table, $data, $return_id, $replace = false) { $data_sql = $this->build_set_sql($data); if (!$data_sql) { return 0; } $method = $replace ? 'REPLACE' : 'INSERT'; $sql = $method . ' INTO ' . $table . ' ' . $data_sql; $res = $this->query($sql); if ($replace) { return $res; } else { return $return_id ? $this->insert_id() : $res; } } function replace($table, $data) { return $this->insert($table, $data, 0, true); } function update($table, $data, $where) { $data_sql = $this->build_set_sql($data); $where_sql = $this->build_where_sql($where); if ($where_sql) { $sql = 'UPDATE ' . $table . $data_sql . $where_sql; return $this->query($sql); } else { return 0; } } function delete($table, $where) { $where_sql = $this->build_where_sql($where); if ($where_sql) { $sql = 'DELETE FROM ' . $table . $where_sql; return $this->query($sql); } else { return 0; } } function build_order_sql($order) { $order_sql = ''; if (is_array($order)) { $order_sql = implode(', ', $order); } else if ($order) { $order_sql = $order; } if ($order_sql) { $order_sql = ' ORDER BY ' . $order_sql . ' '; } return $order_sql; } function build_where_sql($where) { $where_sql = ''; if (is_array($where)) { foreach ($where as $key => $value) { if (is_array($value)) { $value = array_map('addslashes', $value); $where_sql .= ' AND ' . $key . ' IN (\'' . implode("', '", $value) . '\')'; } else if (is_numeric($key)) { $where_sql .= ' AND ' . $value; } elseif (strlen($value) > 0) { switch (substr($value, 0, 1)) { case '>': case '<': case '=': $where_sql .= ' AND ' . $key . $this->fix_where_sql($value) . ''; break; default: $where_sql .= ' AND ' . $key . ' = \'' . addslashes($value) . '\''; break; } } elseif ($key) { if (strpos($key, '=') !== false) { $where_sql .= ' AND ' . $key; } } } } else if ($where) { $where_sql = ' AND ' . $where; } return $where_sql ? ' WHERE 1 ' . $where_sql . ' ' : ''; } function fix_where_sql($value) { $value = preg_replace('/^((?:[><]=?)|=)?\s*(.+)\s*/is', '$1\'$2\'', $value); return $value; } function sql_quot($sql) { $sql = str_replace(array('\\', "\0", "\n", "\r", "'", "\x1a"), array('\\\\', '\\0', '\\n', '\\r', "\\'", '\\Z'), $sql); return $sql; } function build_set_sql($data) { $setkeysql = $comma = ''; foreach ($data as $set_key => $set_value) { if (!preg_match('#^' . $set_key . '\s*?[\+\-\*\/]\s*?\d+$#is', $set_value)) { $set_value = '\'' . $this->sql_quot($set_value) . '\''; } $setkeysql .= $comma . '`' . $set_key . '`=' . $set_value . ''; $comma = ','; } return ' SET ' . $setkeysql . ' '; } } ?><?php
 define('PDO_MYSQL_FETCH_ASSOC', 2); class pdo_mysql_db { var $querynum = 0; var $charset; var $conf = array(); public $debug = 0; function __construct(&$db_conf) { if (!class_exists('PDO')) { throw new Exception('PDO extension was not installed!'); } $this->conf = $db_conf; $this->debug = defined('DEBUG') ? DEBUG : 0; } public function __get($var) { if ($var == 'write_link') { if (isset($this->conf['master'])) { $conf = $this->conf['master']; } else { $conf = $this->conf; } empty($conf['engine']) && $conf['engine'] = ''; $this->write_link = $this->connect($conf, 'master'); return $this->write_link; } else if ($var == 'read_link') { $slave_count = isset($this->conf['slaves']) ? count($this->conf['slaves']) : 0; if (!$slave_count) { $this->read_link = $this->write_link; return $this->read_link; } $slaves = $this->conf['slaves']; $slave = $slaves[rand(0, $slave_count - 1)]; empty($slave['engine']) && $slave['engine'] = ''; $this->read_link = $this->connect($slave, 'slave'); return $this->read_link; } } function connect(&$db_conf) { $host = $db_conf['host']; if (strpos($host, ':') !== FALSE) { list($host, $port) = explode(':', $host); } else { $port = 3306; } if ($db_conf['charset']) { $init_sql = 'SET NAMES ' . $db_conf['charset'] . ', sql_mode=""'; } else { $init_sql = 'SET sql_mode=""'; } try { $init_array = array( PDO::ATTR_PERSISTENT => isset($db_conf['pconnect']) ? $db_conf['pconnect'] : 0, ); $link = new PDO("mysql:host={$host};port={$port};dbname={$db_conf['name']}", $db_conf['user'], $db_conf['pass'], $init_array); $link->query($init_sql); } catch (Exception $e) { exit('[pdo_mysql]Cant Connect Pdo_mysql:' . $e->getMessage()); } return $link; } function get_link($sql) { return $this->is_slave($sql) ? $this->read_link : $this->write_link; } function is_slave($sql) { $slave_array = array('sele', 'set ', 'show'); return in_array(strtolower(substr($sql, 0, 4)), $slave_array); } public function exec($sql, $link = NULL) { $link = $link ? $link : $this->get_link($sql); $n = $link->exec($sql); return $n; } function query($sql, $link = 0) { if ($this->debug) { $mtime = explode(' ', microtime()); $sqlstarttime = number_format(($mtime[1] + $mtime[0] - $_SERVER['starttime']), 6) * 1000; } $link = $link ? $link : $this->get_link($sql); $type = strtolower(substr(trim($sql), 0, 4)); if ($type == 'sele' || $type == 'show') { $result = $link->query($sql); } else { $result = $this->exec($sql, $link); } if ($result === FALSE) { $error = $this->error($link); throw new Exception('[pdo_mysql]Query Error:' . (isset($error[2]) ? "$error[2]" : '') . ',' . (DEBUG ? $sql : '')); } if ($this->debug) { $mtime = explode(' ', microtime()); $sqlendttime = number_format(($mtime[1] + $mtime[0] - $_SERVER['starttime']), 6) * 1000; $sqltime = round(($sqlendttime - $sqlstarttime), 3); $explain = array(); $info = array(); if ($result && $type == 'sele') { $explain_query = $link->query('EXPLAIN ' . $sql); $explain = $this->fetch_array($explain_query); } $sql = ($this->is_slave($sql) ? '[slave]' : '[master]') . $sql; $_SERVER['sqls'][] = array('sql' => $sql, 'type' => 'mysql', 'time' => $sqltime, 'info' => $info, 'explain' => $explain); } $this->querynum++; return $result; } function fetch_array($query, $result_type = PDO_MYSQL_FETCH_ASSOC) { return $query->fetch($result_type); } function fetch_all($query, $index = '') { $list = array(); while ($val = $query->fetch(PDO_MYSQL_FETCH_ASSOC)) { if (!$val) { continue; } if ($index) { $list[$val[$index]] = $val; } else { $list[] = $val; } } return $list; } function result($query) { return $query->fetchColumn(0); } function affected_rows() { return $this->write_link->rowCount(); } function error($link) { return (($link) ? $link->errorInfo() : 0); } function errno($link) { return intval(($link) ? $link->errorCode() : 0); } function insert_id() { $link = $this->write_link; return ($id = $link->lastInsertId()) >= 0 ? $id : $this->result($this->query("SELECT last_insert_id()", $link), 0); } function select($table, $where, $order = array(), $perpage = -1, $page = 1, $fields = array(), $index = '') { $where_sql = $this->build_where_sql($where); if (is_array($fields) && $fields) { $field_sql = implode(',', $fields); } else if ($fields) { $field_sql = $fields; } else { $field_sql = '*'; } $start = ($page - 1) * $perpage; $fetch_first = $perpage == 0 ? true : false; $fetch_all = $perpage == -1 ? true : false; $fetch_count = $perpage == -2 ? true : false; $limit_sql = ''; if (!$fetch_first && !$fetch_all && !$fetch_count) { $limit_sql = ' LIMIT ' . $start . ',' . $perpage; } $order_sql = ''; if ($order) { $order_sql = $this->build_order_sql($order); } $sql = 'SELECT ' . $field_sql . ' FROM ' . $table . $where_sql . $order_sql . $limit_sql; $query = $this->query($sql);; if ($fetch_first) { return $this->fetch_array($query); } else { return $this->fetch_all($query, $index); } } function insert($table, $data, $return_id, $replace = false) { $data_sql = $this->build_set_sql($data); if (!$data_sql) { return 0; } $method = $replace ? 'REPLACE' : 'INSERT'; $sql = $method . ' INTO ' . $table . ' ' . $data_sql; $res = $this->query($sql); if ($replace) { return $res; } else { return $return_id ? $this->insert_id() : $res; } } function replace($table, $data) { return $this->insert($table, $data, 0, true); } function update($table, $data, $where) { $data_sql = $this->build_set_sql($data); $where_sql = $this->build_where_sql($where); if ($where_sql) { $sql = 'UPDATE ' . $table . $data_sql . $where_sql; return $this->query($sql); } else { return 0; } } function delete($table, $where) { $where_sql = $this->build_where_sql($where); if ($where_sql) { $sql = 'DELETE FROM ' . $table . $where_sql; return $this->query($sql); } else { return 0; } } function build_order_sql($order) { $order_sql = ''; if (is_array($order)) { $order_sql = implode(', ', $order); } else if ($order) { $order_sql = $order; } if ($order_sql) { $order_sql = ' ORDER BY ' . $order_sql . ' '; } return $order_sql; } function build_where_sql($where) { $where_sql = array(); if (is_array($where)) { foreach ($where as $key => $value) { if (is_array($value)) { $value = array_map('addslashes', $value); $where_sql[] = $key . ' IN (\'' . implode("', '", $value) . '\')'; } else if (is_numeric($key)) { $where_sql[] = $value; } elseif (strlen($value) > 0) { switch (substr($value, 0, 1)) { case '>': case '<': case '=': $where_sql[] = $key . $this->fix_where_sql($value) . ''; break; default: $where_sql[] = $key . ' = \'' . addslashes($value) . '\''; break; } } elseif ($key) { if (strpos($key, '=') !== false) { $where_sql[] = $key; } } } } else if ($where) { $where_sql[] = $where; } return $where_sql ? ' WHERE ' . implode(' AND ', $where_sql) . ' ' : ''; } function fix_where_sql($value) { $value = preg_replace('/^((?:[><]=?)|=)?\s*(.+)\s*/is', '$1\'$2\'', $value); return $value; } function sql_quot($sql) { $sql = str_replace(array('\\', "\0", "\n", "\r", "'", "\x1a"), array('\\\\', '\\0', '\\n', '\\r', "\\'", '\\Z'), $sql); return $sql; } function build_set_sql($data) { $setkeysql = $comma = ''; foreach ($data as $set_key => $set_value) { if (!preg_match('#^' . $set_key . '\s*?[\+\-\*\/]\s*?\d+$#is', $set_value)) { $set_value = '\'' . $this->sql_quot($set_value) . '\''; } $setkeysql .= $comma . '`' . $set_key . '`=' . $set_value . ''; $comma = ','; } return ' SET ' . $setkeysql . ' '; } } ?><?php
 define('PDO_SQLITE_FETCH_ASSOC', 2); class pdo_sqlite_db { var $querynum = 0; var $link; var $charset; var $init_db = 0; function __construct(&$db_conf) { if (!class_exists('PDO')) { throw new Exception('PDO extension was not installed!'); } $this->connect($db_conf); } function connect(&$db_conf) { if ($this->init_db) { return; } $sqlitedb = "sqlite:{$db_conf['host']}"; try { $link = new PDO($sqlitedb); $link->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION); } catch (Exception $e) { exit('[pdo_sqlite]cant connect sqlite:' . $e->getMessage() . $sqlitedb); } $this->link = $link; return $link; } public function exec($sql, $link = NULL) { empty($link) && $link = $this->link; $n = $link->exec($sql); return $n; } function query($sql) { if (DEBUG) { $sqlstarttime = $sqlendttime = 0; $mtime = explode(' ', microtime()); $sqlstarttime = number_format(($mtime[1] + $mtime[0] - $_SERVER['starttime']), 6) * 1000; } $link = &$this->link; $type = strtolower(substr(trim($sql), 0, 4)); if ($type == 'sele' || $type == 'show') { $result = $link->query($sql); } else { $result = $this->exec($sql, $link); } if (DEBUG) { $mtime = explode(' ', microtime()); $sqlendttime = number_format(($mtime[1] + $mtime[0] - $_SERVER['starttime']), 6) * 1000; $sqltime = round(($sqlendttime - $sqlstarttime), 3); $explain = array(); $info = array(); if ($result && $type == 'sele') { $explain = $this->fetch_array($link->query('EXPLAIN QUERY PLAN ' . $sql)); } $_SERVER['sqls'][] = array('sql' => $sql, 'type' => 'sqlite', 'time' => $sqltime, 'info' => $info, 'explain' => $explain); } if ($result === FALSE) { $error = $this->error(); throw new Exception('[pdo_sqlite]Query Error:' . $sql . ' ' . (isset($error[2]) ? "Errstr: $error[2]" : '')); } $this->querynum++; return $result; } function fetch_array($query, $result_type = PDO_SQLITE_FETCH_ASSOC) { return $query->fetch($result_type); } function fetch_all($query, $index = '') { $list = array(); while ($val = $query->fetch(PDO_MYSQL_FETCH_ASSOC)) { if ($index) { $list[$val[$index]] = $val; } else { $list[] = $val; } } return $list; } function result($query) { return $query->fetchColumn(0); } function affected_rows() { return $this->link->rowCount(); } function error() { return (($this->link) ? $this->link->errorInfo() : 0); } function errno() { return intval(($this->link) ? $this->link->errorCode() : 0); } function insert_id() { return ($id = $this->link->lastInsertId()) >= 0 ? $id : $this->result($this->query("SELECT last_insert_id()"), 0); } function select($table, $where, $order = array(), $perpage = -1, $page = 1, $fields = array(), $index = '') { $where_sql = $this->build_where_sql($where); $field_sql = '*'; if (is_array($fields)) { $field_sql = implode(',', $fields); } else if ($fields) { $field_sql = $fields; } else { $field_sql = '*'; } $start = ($page - 1) * $perpage; $fetch_first = $perpage == 0 ? true : false; $fetch_all = $perpage == -1 ? true : false; $fetch_count = $perpage == -2 ? true : false; $limit_sql = ''; if (!$fetch_first && !$fetch_all && !$fetch_count) { $limit_sql = ' LIMIT ' . $start . ',' . $perpage; } $order_sql = ''; if ($order) { $order_sql = $this->build_order_sql($order); } $sql = 'SELECT ' . $field_sql . ' FROM ' . $table . $where_sql . $order_sql . $limit_sql; $query = $this->query($sql);; if ($fetch_first) { return $this->fetch_array($query); } else { return $this->fetch_all($query, $index); } } function insert($table, $data, $return_id) { $data_sql = $this->build_insert_sql($data); if (!$data_sql) { return 0; } $sql = 'INSERT INTO ' . $table . ' ' . $data_sql; $res = $this->query($sql); return $return_id ? $this->insert_id() : $res; } function update($table, $data, $where) { $data_sql = $this->build_set_sql($data); $where_sql = $this->build_where_sql($where); if ($where_sql) { $sql = 'UPDATE ' . $table . $data_sql . $where_sql; return $this->query($sql); } else { return 0; } } function delete($table, $where) { $where_sql = $this->build_where_sql($where); if ($where_sql) { $sql = 'DELETE FROM ' . $table . $where_sql; return $this->query($sql); } else { return 0; } } function build_order_sql($order) { $order_sql = ''; if (is_array($order)) { $order_sql = implode(', ', $order); } else if ($order) { $order_sql = $order; } if ($order_sql) { $order_sql = ' ORDER BY ' . $order_sql . ' '; } return $order_sql; } function build_where_sql($where) { $where_sql = ''; if (is_array($where)) { foreach ($where as $key => $value) { if (is_array($value)) { $value = array_map('addslashes', $value); $where_sql .= ' AND ' . $key . ' IN (\'' . implode("', '", $value) . '\')'; } else if (is_numeric($key)) { $where_sql .= ' AND ' . $value; } elseif (strlen($value) > 0) { switch (substr($value, 0, 1)) { case '>': case '<': case '=': $where_sql .= ' AND ' . $key . $this->fix_where_sql($value) . ''; break; default: $where_sql .= ' AND ' . $key . ' = \'' . addslashes($value) . '\''; break; } } elseif ($key) { if (strpos($key, '=') !== false) { $where_sql .= ' AND ' . $key; } } } } else if ($where) { $where_sql = ' AND ' . $where; } return $where_sql ? ' WHERE 1 ' . $where_sql . ' ' : ''; } function fix_where_sql($value) { $value = preg_replace('/^((?:[><]=?)|=)?\s*(.+)\s*/is', '$1\'$2\'', $value); return $value; } function sql_quot($sql) { $sql = str_replace(array('\\', "\0", "\n", "\r", "'", "\x1a"), array('\\\\', '\\0', '\\n', '\\r', "\\'", '\\Z'), $sql); return $sql; } function build_set_sql($data) { $setkeysql = $comma = ''; foreach ($data as $set_key => $set_value) { if (!preg_match('#^' . $set_key . '\s*?[\+\-\*\/]\s*?\d+$#is', $set_value)) { $set_value = '\'' . $this->sql_quot($set_value) . '\''; } $setkeysql .= $comma . '`' . $set_key . '`=' . $set_value . ''; $comma = ','; } return ' SET ' . $setkeysql . ' '; } function build_insert_sql($data) { $setkeyvar = $setkeyval = $comma = ''; foreach ($data as $set_key => $set_value) { $setkeyvar .= $comma . '`' . $set_key . '`'; $setkeyval .= $comma . '\'' . $this->sql_quot($set_value) . '\''; $comma = ','; } return '(' . $setkeyvar . ') VALUES(' . $setkeyval . ')'; } } ?><?php
 define('E_HOOK', -999999); define('HOOK_STOP', -999998); !defined('HOOK_PATH') && define('HOOK_PATH', ROOT_PATH . 'hook/'); !defined('HOOK_EXPIRE') && define('HOOK_EXPIRE', 3); function load_hook_cls($name) { static $loaded = array(); if (DEBUG) { if (!isset($loaded[$name])) { $loaded[$name] = 1; require HOOK_PATH . $name . '.php'; } } else { if ($loaded) { return; } $loaded = 1; $run_file = FRAMEWORK_TMP_PATH . '_hook_runtime.php'; if (!(@include($run_file))) { $content = ''; $inc_files = glob(HOOK_PATH . '*.php'); foreach ($inc_files as $inc_file) { if (strpos($inc_file, 'hook_') !== false) { $content .= php_strip_whitespace($inc_file); } } file_put_contents($run_file, $content); require $run_file; } } } function get_hook($name) { static $hook_data = NULL; $cache_file = FRAMEWORK_TMP_PATH . '_hook_cache.php'; if ($hook_data == NULL) { $hook_hash = ''; $file_time = is_file($cache_file) ? filemtime($cache_file) : 0; $reload = $file_time ? 0 : 1; if ($file_time) { $load_data = json_decode(file_get_contents($cache_file), 1); $hook_data = $load_data['data']; $hook_time = isset($_SERVER['time']) ? $_SERVER['time'] : time(); if ($hook_time - $file_time > 3600 && rand(0, HOOK_EXPIRE) == 1) { $hook_files = misc::scandir(HOOK_PATH); rsort($hook_files, SORT_NUMERIC); $hook_hash = array(); foreach ($hook_files as $hook_file) { if (strpos($hook_file, 'hook_') !== false) { $hook_hash[] = crc32(file_get_contents(HOOK_PATH . $hook_file)); } } $hook_hash = implode('|', $hook_hash); if ($load_data['hash'] != $hook_hash) { $reload = true; } else { touch($cache_file); } } } if ($reload) { if (!isset($hook_files)) { $hook_files = misc::scandir(HOOK_PATH); rsort($hook_files, SORT_NUMERIC); $hook_hash = array(); foreach ($hook_files as $hook_file) { if (strpos($hook_file, 'hook_') !== false) { $hook_hash[] = crc32(file_get_contents(HOOK_PATH . $hook_file)); } } $hook_hash = implode('|', $hook_hash); } $hook_data = array(); foreach ($hook_files as $file) { if (strpos($file, 'hook_') !== false) { $cls_name = str_replace('.php', '', $file); load_hook_cls($cls_name); $cls_name = preg_replace('#^\d+\.#is', '', $cls_name); $methods = get_class_methods($cls_name); foreach ($methods as $hook) { if ($hook[0] == '_') { continue; } if (!isset($hook_data[$hook])) { $hook_data[$hook] = array(); } $hook_data[$hook][] = $cls_name; } } } $save_data = array( 'data' => $hook_data, 'hash' => $hook_hash, ); file_put_contents($cache_file, json_encode($save_data)); } } return isset($hook_data[$name]) ? $hook_data[$name] : false; } function hook($name) { $funcs = get_hook($name); if ($funcs) { $returns = array(); $args = array_slice(func_get_args(), 1); $arg_count = count($args); foreach ($funcs as $cls) { load_hook_cls($cls); switch ($arg_count) { case 5: $return = call_user_func($cls . '::' . $name, $args[0], $args[1], $args[2], $args[3], $args[4]); break; case 4: $return = call_user_func($cls . '::' . $name, $args[0], $args[1], $args[2], $args[3]); break; case 3: $return = call_user_func($cls . '::' . $name, $args[0], $args[1], $args[2]); break; case 2: $return = call_user_func($cls . '::' . $name, $args[0], $args[1]); break; case 1: $return = call_user_func($cls . '::' . $name, $args[0]); break; case 0: $return = call_user_func($cls . '::' . $name); break; default: $return = call_user_func($cls . '::' . $name, $args); } if (is_array($return) && isset($return['HOOK'])) { if ($return['HOOK'] == HOOK_STOP) { $returns[] = $return['return']; break; } } $returns[] = $return; } return $returns; } return E_HOOK; } function out_hook($returns, $implode = '') { if ($returns == E_HOOK) { return ''; } $return = implode($implode, $returns); return $return; } function url($control, $action = '', $params = array()) { if (strpos($control, '-') === false) { $control_action = $control . '-' . $action; } else { $control_action = $control; $params = $action; } if ($params) { $queries = array(); if (is_array($params)) { foreach ($params as $query => $value) { if (is_array($value)) { foreach ($value as $key => $val) { if (is_array($val)) { foreach ($val as $son_key => $son_val) { $queries[] = $query . '[' . $key . '][' . $son_key . ']=' . rawurldecode($son_val); } } else { $queries[] = $query . '[' . $key . ']=' . rawurlencode($val); } } } else { $queries[] = $query . '=' . rawurlencode($value); } } $queries = '&' . implode('&', $queries); } else { $queries = ($params[0] == '&' ? '' : '&') . $params; } } if (core::$conf['url_rewrite']) { $rewrite_info = core::$conf['rewrite_info']; $comma = $rewrite_info['comma'] ? $rewrite_info['comma'] : '-'; $extension = $rewrite_info['ext']; return core::rewrite(core::$conf['app_dir'], str_replace('-', $comma, $control_action), $queries, $comma, $extension, 0); } else { return core::$conf['app_dir'] . '?c=' . $control_action . $queries; } } ?><?php
 class log { public static $log_file = 0; public static $log_fp = 0; public static function set_logfile($file) { if ($file == 1) { $file = ROOT_PATH . 'data/log/' . date('Y-m-d') . '.log'; } self::$log_file = $file; self::$log_fp = fopen($file, 'a+'); } public static function set_file($file) { self::set_logfile($file); } public static function dump_var($data) { if (is_array($data)) { $str = ''; foreach ($data as $k => $v) { if (is_array($v)) { $str .= '[' . $k . '=' . self::dump_var($v) . ']'; } else { $str .= '[' . $k . '=' . $v . ']'; } } return $str; } else { return '[' . $data . ']'; } } public static function info() { self::add_log('info', func_get_args(), func_num_args()); } public static function error() { self::add_log('error', func_get_args(), func_num_args()); throw new Exception('error'); } private static function add_log($type, $arg_list, $arg_count) { $log = ''; for ($i = 0, $l = $arg_count; $i < $l; $i++) { $log .= self::dump_var($arg_list[$i]); } $usetime = core::usedtime(); if ($usetime > 1000 * 360 * 60) { $usetime = round($usetime / (1000 * 60), 3) . 'h'; } else if ($usetime > 1000 * 360) { $usetime = round($usetime / (1000 * 60), 3) . 'm'; } else if ($usetime > 1000 * 60) { $usetime = round($usetime / 1000, 3) . 's'; } else { $usetime = $usetime . 'ms'; } $log .= '[' . $usetime . "]"; $log = "[" . date('H:i:s') . "]" . $log . "\r\n"; if (self::$log_fp) { fputs(self::$log_fp, $log); } if (core::is_cmd()) { echo $log; } else { if (isset($_SERVER['log'])) { $_SERVER['log'] = array( 'info' => array(), 'error' => array(), ); } $_SERVER['log'][$type][] = $log; } } } ?><?php
if (!defined('FORM_HASH_KEY')) { define('FORM_HASH_KEY', isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : 'mzphp' . ($conf['app_id'])); } class misc { public static function R($url, $code = 301) { ob_end_clean(); header('Location: ' . $url, true, $code); exit; } public static function form_hash($auth_key = '') { if (!$auth_key) { static $form_hash_key; if (!$form_hash_key) { $form_hash_key = md5(core::$conf['app_id']); } $auth_key = $form_hash_key; } return substr(md5(substr($_SERVER['time'], 0, -5) . $auth_key), 16); } public static function form_submit($auth_key = '') { $hash = core::R('FORM_HASH'); return $hash == self::form_hash($auth_key); } public static function get_url_path() { $port = core::gpc('SERVER_PORT', 'S'); $host = core::gpc('HTTP_HOST', 'S'); $path = substr(core::gpc('PHP_SELF', 'S'), 0, strrpos(core::gpc('PHP_SELF', 'S'), '/')); $http = (($port == 443) || (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) != 'off')) ? 'https' : 'http'; return "$http://$host$path/"; } public static function get_uri() { $port = core::gpc('SERVER_PORT', 'S'); $host = core::gpc('HTTP_HOST', 'S'); if (isset($_SERVER['HTTP_X_REWRITE_URL'])) { $request_uri = $_SERVER['HTTP_X_REWRITE_URL']; } else { $request_uri = $_SERVER['REQUEST_URI']; } $http = (($port == 443) || (isset($_SERVER['HTTPS']) && strtolower($_SERVER['HTTPS']) != 'off')) ? 'https' : 'http'; return "$http://$host" . $request_uri; } public static function human_date($timestamp, $date = 'Y-m-d') { $seconds = $_SERVER['time'] - $timestamp; if ($seconds > 31536000) { return date($date, $timestamp); } elseif ($seconds >= 2592000) { return round($seconds / 2592000) . ' 月前'; } elseif ($seconds >= 86400) { return round($seconds / 86400) . ' 天前'; } elseif ($seconds >= 3600) { return round($seconds / 3600) . ' 小时前'; } elseif ($seconds >= 60) { return round($seconds / 60) . ' 分钟前'; } else { return $seconds . ' 秒前'; } } public static function human_num($num) { $num > 100000 && $num = round($num / 10000, 2) . '万'; return $num; } public static function human_size($num) { if ($num > 1073741824) { return number_format($num / 1073741824, 2, '.', '') . 'G'; } elseif ($num > 1048576) { return number_format($num / 1048576, 2, '.', '') . 'M'; } elseif ($num > 1024) { return number_format($num / 1024, 2, '.', '') . 'K'; } else { return $num . 'B'; } } public static function hexdump($data, $newline = "\n") { static $from = ''; static $to = ''; static $width = 16; static $pad = '.'; if ($from === '') { for ($i = 0; $i <= 0xFF; $i++) { $from .= chr($i); $to .= ($i >= 0x20 && $i <= 0x7E) ? chr($i) : $pad; } } $hex = str_split(bin2hex($data), $width * 2); $chars = str_split(strtr($data, $from, $to), $width); $offset = 0; foreach ($hex as $i => $line) { echo sprintf('%6X', $offset) . ' : ' . implode(' ', str_split($line, 2)) . ' [' . $chars[$i] . ']' . $newline; $offset += $width; } } public static function is_writable($file) { try { if (is_file($file)) { if (strpos(strtoupper(PHP_OS), 'WIN') !== FALSE) { $fp = @fopen($file, 'rb+'); @fclose($fp); return (bool)$fp; } else { return is_writable($file); } } elseif (is_dir($file)) { $tmpfile = $file . '/____tmp.tmp'; $n = @file_put_contents($tmpfile, 'a'); if ($n > 0) { unlink($tmpfile); return TRUE; } else { return FALSE; } } } catch (Exception $e) { return false; } } public static function ext($filename) { return strtolower(trim(substr(strrchr($filename, '.'), 1))); } public static function scandir($dir, $exts = array()) { if (!is_dir($dir)) { return array(); } $df = opendir($dir); $arr = array(); $search_ext = !empty($exts) && is_array($exts) ? 1 : 0; while (false !== ($file = readdir($df))) { if ($file == '.' || $file == '..') { continue; } $find = false; if ($search_ext) { if (in_array(self::ext($file), $exts)) { $arr[] = $file; } } else { $arr[] = $file; } } closedir($df); return $arr; } public static function rmdir($dir, $keepdir = 0) { if ($dir == '/' || $dir == '../') return FALSE; if (!is_dir($dir)) return FALSE; substr($dir, -1, 1) != '/' && $dir .= '/'; $files = self::scandir($dir); foreach ($files as $file) { if ($file == '.' || $file == '..') continue; $filepath = $dir . $file; if (!is_dir($filepath)) { try { unlink($filepath); } catch (Exception $e) { } } else { self::rmdir($filepath . '/'); } } try { if (!$keepdir) rmdir($dir); } catch (Exception $e) { } return TRUE; } function copy($source, $dest) { $dir_handle = opendir($source); mkdir($dest . '/', 0755, 1); $files = array(); while ($res = readdir($dir_handle)) { if ($res == '.' || $res == '..') { continue; } $source_file = $source . '/' . $res; if (is_dir($source_file)) { $files += self::copy($source_file, $dest); } else { if (copy($source_file, $dest . '/')) { $files[] = $source_file; } } } return $files; } public static function pages($num = -1, $perpage, $curpage, $url_prefix, $options = array()) { $page = 8; $page_html = ''; $realpages = 1; $options = array_merge(array( 'curr' => '[第 <strong>%d</strong> 页]', 'first' => '首页', 'last' => '尾页', 'prev' => '上一页', 'next' => '下一页', 'total' => '共 <strong>%d</strong> 页', 'wrap' => '%s', ), $options); if ($num == -1 || $num > $perpage) { if ($num > 0) { $offset = 2; $realpages = @ceil($num / $perpage); $pages = $realpages; if ($page > $pages) { $from = 1; $to = $pages; } else { $from = $curpage - $offset; $to = $from + $page - 1; if ($from < 1) { $to = $curpage + 1 - $from; $from = 1; if ($to - $from < $page) { $to = $page; } } elseif ($to > $pages) { $from = $pages - $page + 1; $to = $pages; } } } $page_html = ''; if ($num == 0 && $options['curr']) { $page_html .= "" . sprintf($options['curr'], $curpage) . " "; } if ($options['first']) { $page_html .= sprintf($options['wrap'], "<a href=\"" . sprintf($url_prefix, 1) . "\">" . $options['first'] . "</a>"); } if ($options['prev']) { if ($curpage > 1) { $page_html .= sprintf($options['wrap'], "<a href=\"" . sprintf($url_prefix, $curpage - 1) . "\">" . $options['prev'] . "</a>"); } } if ($num > 0 && $options['curr']) { for ($i = $from; $i <= $to; $i++) { if ($i == $curpage) { $page_html .= sprintf($options['wrap'], "<strong>" . sprintf($options['curr'], $i) . "</strong>"); } else { $page_html .= sprintf($options['wrap'], "<a href=\"" . sprintf($url_prefix, $i) . "\">" . sprintf(strip_tags($options['curr']), $i) . "</a>"); } } } if ($options['next']) { if ($curpage + 1 <= $realpages || $num == 0) { $page_html .= sprintf($options['wrap'], "<a href=\"" . sprintf($url_prefix, $curpage + 1) . "\">" . $options['next'] . "</a>"); } } if ($page_html && $num > 0 && $options['total']) { $page_html .= sprintf($options['wrap'], sprintf($options['total'], $realpages)); } if ($to < $pages || $num > 0) { if ($options['last']) { $page_html .= sprintf($options['wrap'], "<a href=\"" . sprintf($url_prefix, $pages) . "\">" . $options['last'] . "</a>"); } } } return $page_html; } public static function is_robot() { $user_agent = strtolower(core::S('HTTP_USER_AGENT')); $robots = array( 'googlebot' => 'google', 'baiduspider' => 'baidu', 'sogou spider' => 'sogou', 'sosospider' => 'soso', '360spider' => '360', 'sohu-search' => 'sohu' ); if (!isset($_SERVER['is_robot'])) { foreach ($robots as $robot => $spider) { if (strpos($user_agent, $robot) !== false) { $_SERVER['is_robot'] = $spider; return $_SERVER['is_robot']; } } $_SERVER['is_robot'] = false; } return $_SERVER['is_robot']; } } ?><?php
 class spider { public static $last_response_code = -1; public static $url = ''; public static $last_header = array(); public static function no_html($html) { return self::reg_replace($html, array('<(*)>' => '')); } public static function html2txt($html) { $html = strtr($html, array( '&nbsp;' => ' ', '&rdquo;' => '”', '&ldquo;' => '“', )); $html = preg_replace('/^[\s\t]+/is', ' ', $html); $html = preg_replace('#<?xml[\s\S]*?>#is', '', $html); $html = preg_replace('#<!--[\s\S]*?-->#is', '', $html); $html = preg_replace('#<!doc[\s\S]*?>#is', '', $html); $html = preg_replace('#<(head|script|iframe|frame|noscript|noframes|option|style)[\s\S]*?</\1>#is', '', $html); $html = preg_replace('#<(br|hr|li|ol|ul|dl|h\d|dd|dt|center|form|table|tr|marquee|div|pre|p|blockquote).*?>#is', "\n", $html); $html = self::strip_tags($html); $html = html_entity_decode($html, ENT_COMPAT, 'UTF-8'); $html = preg_replace('#([\r\n]\s+[\r\n])+#is', "\n", $html); $html = str_replace(array("\r", "\n\n"), "\n", $html); while (strpos($html, "\n\n") !== false) { $html = str_replace("\n\n", "\n", $html); } return $html; } public static function strip_tags($text, $tags = '') { preg_match_all('/<([\w\-\.]+)[\s]*\/?[\s]*>/si', strtolower(trim($tags)), $tags); $tags = array_unique($tags[1]); $searches = array(); static $block_set = array( 'head' => 1, 'script' => 1, 'iframe' => 1, 'frame' => 1, 'noscript' => 1, 'noframes' => 1, 'option' => 1, 'style' => 1, ); $searches[] = '#<!--[\s\S]*?-->#is'; $searches[] = '#<\!--[if[^\]]*?\]>[\S\s]<\!\[endif\]-->#is'; if (is_array($tags) && count($tags) > 0) { $line_tags = $block_tags = ''; foreach ($tags as $tag) { if (!$tag) { continue; } if (isset($block_set[$tag])) { unset($block_set[$tag]); } $line_tags .= $tag . '|'; } $block_set = array_keys($block_set); $block_tags = implode('|', $block_set); if ($block_tags) { $searches[] = '#<(' . $block_tags . ')\b[\s\S]*?</\1>#is'; } if ($line_tags) { $line_tags = substr($line_tags, 0, -1); $searches[] = '#<(?!(?:' . $line_tags . ')|\/(?:' . $line_tags . ')\b)[^>]*?>#si'; } return preg_replace($searches, '', $text); } else { $searches[] = '#<(' . implode('|', $block_set) . ')\b[\s\S]*?</\1>#is'; $searches[] = '#<\/?[^>]*?>#si'; return preg_replace($searches, '', $text); } } public static function cut_str($html, $start = '', $end = '') { if ($start) { $html = stristr($html, $start, false); $html = substr($html, strlen($start)); } $end && $html = stristr($html, $end, true); return $html; } public static function mask_match($html, $pattern, $returnfull = false) { $part = explode('(*)', $pattern); if (count($part) == 1) { return ''; } else { if ($part[0] && $part[1]) { $res = self::cut_str($html, $part[0], $part[1]); if ($res) { return $returnfull ? $part[0] . $res . $part[1] : $res; } } else { if ($part[0]) { if (strpos($html, $part[0]) !== false) { $html = explode($part[0], $html); if ($html[1]) { return $returnfull ? $part[0] . $html[1] : $html[1]; } } } elseif ($part[1]) { if (strpos($html, $part[1]) !== false) { $html = explode($part[1], $html); if ($html[0]) { return $returnfull ? $html[0] . $part[1] : $html[0]; } } } } return ''; } } public static function reg_replace($html, $patterns) { if (!is_array($patterns)) { $patterns = array($patterns => ''); } foreach ($patterns as $search => $replace) { if (strpos($search, '(*)') !== false) { while ($searchhtml = self::mask_match($html, $search, true)) { if ($searchhtml) { $html = str_replace($searchhtml, $replace, $html); continue; } break; } } elseif (preg_match('/^([\#\/\|\!\@]).+\\1([ismSMI]+)?$/is', $search)) { $html = preg_replace($search, $replace, $html); } else { $html = str_replace($search, $replace, $html); } } return $html; } public static function match($html, $patterns, $option = array('url' => '')) { $tmplist = array(); if (isset($patterns['_sleep'])) { usleep($patterns['_sleep']); unset($patterns['_sleep']); } if (isset($patterns['_replace'])) { if (!is_array($patterns['_replace'])) { $patterns['_replace'] = array($patterns['_replace'] => ''); } $html = self::reg_replace($html, $patterns['_replace']); unset($patterns['_replace']); } $extractor = NULL; $dom = NULL; $fetchqueue = array(); foreach ($patterns as $key => $val) { $value = NULL; if (!is_array($val)) { $val = array($val); } if (isset($val['pattern'])) { $matchhtml = self::match_pre_process($html, $val); if (!is_array($val['pattern'])) { $val['pattern'] = array($val['pattern']); } foreach ($val['pattern'] as $pattern) { if (strpos($pattern, '(*)') === false) { $value = self::reg_match($matchhtml, $pattern); if ($value) { break; } } else { $value = self::mask_match($matchhtml, $pattern); if ($value) { self::match_process($value, $val['process']); break; } } } } elseif (isset($val['selector'])) { } else { foreach ($val as &$pattern_array) { if (!is_array($pattern_array) || !isset($pattern_array['pattern'])) { $pattern_array = array( array('pattern' => array($pattern_array)) ); } $find_value = false; foreach ($pattern_array as $pattern_info) { if (!isset($pattern_info['pattern'])) { continue; } $matchhtml = self::match_pre_process($html, $val); if (!$matchhtml) { continue; } foreach ($pattern_info['pattern'] as $pattern) { $value = self::str_match($html, $pattern, $dom, $option); if ($value) { $find_value = true; self::match_process($value, $pattern_info['process']); break; } } } if ($find_value) { break; } } } $tmplist[$key] = $value; } if ($dom) { } if ($fetchqueue) { foreach ($fetchqueue as $url) { $html = self::fetch_url($url['url']); $matches = self::match($html, $url['patterns']); $tmplist[$url['key']][$url['index']]['fetched'] = $matches; } } return $tmplist; } private static function match_process(&$value, &$process) { if ($process) { if (!is_array($process)) { $process = array($process); } foreach ($process as $index => $processor) { $value = call_user_func($processor, $value); } } } private static function match_pre_process($html, &$pattern_info) { $matchhtml = $html; if (isset($pattern_info['cut'])) { if (!is_array($pattern_info['cut'])) { $pattern_info['cut'] = array($pattern_info['cut']); } foreach ($pattern_info['cut'] as $pattern) { $matchhtml = self::mask_match($html, $pattern); if ($matchhtml) { break; } } } if (isset($pattern_info['_replace'])) { if (!is_array($pattern_info['_replace'])) { $pattern_info['_replace'] = array($pattern_info['_replace'] => ''); } $matchhtml = self::reg_replace($matchhtml, $pattern_info['_replace']); } return $matchhtml; } public static function str_match($str, $pattern, &$dom, $option) { $value = ''; if (strpos($pattern, '(*)') !== false) { $value = self::mask_match($str, $pattern); } elseif (substr($pattern, 0, 4) == 'DOM:') { return self::dom_match($str, $pattern, $dom, $option); } elseif (strpos($pattern, '(') !== false) { preg_match_all($pattern, $str, $value); $value = $value[1][0]; } return $value; } public static function dom_match($html, $pattern, &$dom, $option) { if (function_exists('dom_match')) { return call_user_func('dom_match', $html, $pattern, $dom, $option); } return ''; } public static function reg_match($html, $reg, $return_index = -1) { $list = array(); preg_match_all($reg, $html, $list); self::filter_list($list); if ($return_index == -1) { return $list; } else { return $list[$return_index]; } } private static function filter_list(&$list) { foreach ($list as $key => $val) { if (is_numeric($key)) { unset($list[$key]); } } $keys = array_keys($list); foreach ($keys as $idx => $key) { if (is_numeric($key)) continue; foreach ($list[$key] as $index => $value) { $list[$index][$key] = $value; } unset($list[$key]); } } public static function abs_url($base_url, $src_url) { if (!$src_url) { return ''; } $src_info = parse_url($src_url); if (isset($src_info['scheme'])) { return $src_url; } $base_info = parse_url($base_url); $url = $base_info['scheme'] . '://' . $base_info['host']; if (!isset($src_info['path'])) { $src_info['path'] = ''; } if (substr($src_info['path'], 0, 1) == '/') { $path = $src_info['path']; } else { if (empty($src_info['path'])) { $path = ($base_info['path']); } else { if (substr($base_info['path'], -1) == '/') { $path = $base_info['path'] . $src_info['path']; } else { $path = (dirname($base_info['path']) . '/') . $src_info['path']; } } } $rst = array(); $path_array = explode('/', $path); if (!$path_array[0]) { $rst[] = ''; } foreach ($path_array as $key => $dir) { if ($dir == '..') { if (end($rst) == '..') { $rst[] = '..'; } elseif (!array_pop($rst)) { $rst[] = '..'; } } elseif (strlen($dir) > 0 && $dir != '.') { $rst[] = $dir; } } if (!end($path_array)) { $rst[] = ''; } $url .= implode('/', $rst); $url = str_replace('\\', '/', $url); $url = str_ireplace('&amp;', '&', $url); return $url . ($src_info['query'] ? '?' . $src_info['query'] : ''); } public static function GET($url, $headers = array(), $timeout = 5, $deep = 0) { return self::fetch_url($url, '', $headers, $timeout, $deep); } public static function POST($url, $post, $headers = array(), $timeout = 5, $deep = 0) { return self::fetch_url($url, $post, $headers, $timeout, $deep); } public static function fetch_url($url, $post = '', $headers = array(), $timeout = 5, $deep = 0) { if ($deep > 5) throw new Exception('超出 fetch_url() 最大递归深度！'); static $stream_wraps = null; if ($stream_wraps == null) { $stream_wraps = stream_get_wrappers(); } static $allow_url_fopen = null; if ($allow_url_fopen == null) { $allow_url_fopen = strtolower(ini_get('allow_url_fopen')); $allow_url_fopen = (empty($allow_url_fopen) || $allow_url_fopen == 'off') ? 0 : 1; } !is_array($headers) && $headers = array(); $HTTP_USER_AGENT = $_SERVER['HTTP_USER_AGENT']; empty($HTTP_USER_AGENT) && $HTTP_USER_AGENT = 'Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)'; $matches = parse_url($url); $host = $matches['host']; $path = isset($matches['path']) ? $matches['path'] . (!empty($matches['query']) ? '?' . $matches['query'] : '') : '/'; $port = !empty($matches['port']) ? $matches['port'] : 80; $https = $matches['scheme'] == 'https' ? true : false; $charset = ''; $defheaders = array( 'Accept' => '*/*', 'User-Agent' => $HTTP_USER_AGENT, 'Accept-Encoding' => 'gzip, deflate', 'Host' => $host, 'Connection' => 'Close', 'Accept-Language' => 'zh-cn', ); if (!empty($post)) { $defheaders['Cache-Control'] = 'no-cache'; $out = "POST {$path} HTTP/1.0\r\n"; } else { $out = "GET {$path} HTTP/1.0\r\n"; } $socketmode = !$https && function_exists('fsockopen') && function_exists('mime_content_type') ? true : false; $fetchmode = function_exists('curl_init') || isset($headers['curl']) ? 'curl' : ($socketmode ? 'socket' : ''); if ($headers['charset']) { $charset = $headers['charset']; } unset($headers['curl'], $headers['charset']); if (is_array($headers) && $headers) { foreach ($headers as $key => $val) { $defheaders[$key] = $val; } } if ($fetchmode == 'socket') { $limit = 1024000000; $ip = ''; $return = ''; $defheaders['Content-Type'] = 'application/x-www-form-urlencode'; if (is_array($post)) { $boundary = ''; $post_body = ''; foreach ($post as $k => $v) { if ($v[0] == '@') { $v = substr($v, 1); if ($v && is_file($v)) { if (!$boundary) { $boundary = '---------------upload' . uniqid('spider'); } $mime = mime_content_type($v); $post_body .= "\r\n" . 'Content-Disposition: form-data; name="' . $k . '"; filename="' . $v . '"' . "\r\n" . 'Content-Type: ' . $mime . "\r\n\r\n" . file_get_contents($v) . "\r\n--" . $boundary; unset($post[$k]); } } } if ($boundary) { if ($post) { foreach ($post as $k => $v) { $post_body .= "\r\n" . 'Content-Disposition: form-data; name="' . $k . '"' . "\r\n\r\n" . $v . "\r\n--" . $boundary; } } $post_body = '--' . $boundary . $post_body . '--'; $post = $post_body; $defheaders['Content-Type'] = 'multipart/form-data; boundary=' . $boundary; } else { $post = http_build_query($post); } $defheaders['Content-Length'] = strlen($post); } foreach ($defheaders as $hkey => $hval) { $out .= $hkey . ': ' . $hval . "\r\n"; } $out .= "\r\n"; if (!empty($post)) { $out .= $post; } $host == 'localhost' && $ip = '127.0.0.1'; $fp = @fsockopen(($ip ? $ip : $host), $port, $errno, $errstr, $timeout); if (!$fp) { return FALSE; } else { stream_set_blocking($fp, TRUE); stream_set_timeout($fp, $timeout); @fwrite($fp, $out); $status = stream_get_meta_data($fp); $gzip = false; if (!$status['timed_out']) { $starttime = time(); while (!feof($fp)) { if (($header = @fgets($fp)) && ($header == "\r\n" || $header == "\n")) { break; } else { $header = strtolower($header); if (substr($header, 0, 9) == 'location:') { $location = trim(substr($header, 9)); self::$url = $location; return self::fetch_url($location, $timeout, $post, $headers, $deep + 1); } else if (strpos($header, 'content-encoding:') !== false && strpos($header, 'gzip') !== false ) { $gzip = true; } else if (strpos($header, 'content-type:') !== false) { preg_match('@Content-Type:\s+([\w/+]+)(;\s+charset=([\w-]+))?@i', $header, $charsetmatch); if (isset($charsetmatch[3])) { $charset = $charsetmatch[3]; } } } } $stop = false; while (!feof($fp) && !$stop) { $data = fread($fp, ($limit == 0 || $limit > 8192 ? 8192 : $limit)); $return .= $data; if ($limit) { $limit -= strlen($data); $stop = $limit <= 0; } if (time() - $starttime > $timeout) break; } if ($gzip) { $return = self::gzdecode($return); } } @fclose($fp); return self::convert_html_charset($return, $charset); } } elseif ($fetchmode == 'curl') { $ch = curl_init(); curl_setopt($ch, CURLOPT_URL, $url); curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1); curl_setopt($ch, CURLOPT_HEADER, 1); curl_setopt($ch, CURLOPT_TIMEOUT, $timeout); curl_setopt($ch, CURLINFO_HEADER_OUT, 1); if ($https) { if (isset($defheaders[CURLOPT_SSLCERT])) { $ssl_verifypeer = 1; curl_setopt($ch, CURLOPT_SSLCERT, realpath($defheaders[CURLOPT_SSLCERT])); curl_setopt($ch, CURLOPT_SSLKEY, realpath($defheaders[CURLOPT_SSLKEY])); if (isset($defheaders[CURLOPT_SSLCERTTYPE])) { curl_setopt($ch, CURLOPT_SSLCERTTYPE, $defheaders[CURLOPT_SSLCERTTYPE]); } if (isset($defheaders[CURLOPT_SSLKEYTYPE])) { curl_setopt($ch, CURLOPT_SSLKEYTYPE, $defheaders[CURLOPT_SSLKEYTYPE]); } unset($defheaders[CURLOPT_SSLCERTTYPE], $defheaders[CURLOPT_SSLCERT], $defheaders[CURLOPT_SSLKEYTYPE], $defheaders[CURLOPT_SSLKEY]); } else if (isset($defheaders[CURLOPT_SSLCERT])) { $ssl_verifypeer = 1; curl_setopt($ch, CURLOPT_SSLCERT, realpath($defheaders[CURLOPT_SSLCERT])); unset($defheaders[CURLOPT_SSLCERT]); } else { $ssl_verifypeer = 0; } if (isset($defheaders[CURLOPT_CAINFO])) { curl_setopt($ch, CURLOPT_CAINFO, realpath($defheaders[CURLOPT_CAINFO])); unset($defheaders[CURLOPT_CAINFO]); } if (isset($defheaders[CURLOPT_CAPATH])) { curl_setopt($ch, CURLOPT_CAPATH, realpath($defheaders[CURLOPT_CAPATH])); unset($defheaders[CURLOPT_CAPATH]); } if (isset($defheaders[CURLOPT_SSL_VERIFYPEER])) { curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $defheaders[CURLOPT_SSL_VERIFYPEER]); unset($defheaders[CURLOPT_SSL_VERIFYPEER]); } else { curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, $ssl_verifypeer); } if (isset($defheaders[CURLOPT_SSL_VERIFYHOST])) { curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, $defheaders[CURLOPT_SSL_VERIFYHOST]); unset($defheaders[CURLOPT_SSL_VERIFYHOST]); } else { curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 2); } } if (defined('CURLOPT_SAFE_UPLOAD')) { curl_setopt($ch, CURLOPT_SAFE_UPLOAD, false); } if ($post) { curl_setopt($ch, CURLOPT_POST, 1); $is_multi_part = 0; if (is_array($post)) { $is_curl_file = version_compare(phpversion(), '5.5.0') >= 0 && class_exists('CURLFile') ? true : false; foreach ($post as $index => $value) { if ($value[0] == '@') { if ($is_curl_file) { $post[$index] = new CURLFile(realpath(substr($value, 1))); } $is_multi_part = 2; } } } else { $is_multi_part = 1; } curl_setopt($ch, CURLOPT_POSTFIELDS, $is_multi_part ? $post : http_build_query($post)); } if (isset($defheaders['ip'])) { curl_setopt($ch, CURLOPT_INTERFACE, $defheaders['ip']); unset($defheaders['ip']); } if (isset($defheaders['Accept-Encoding'])) { curl_setopt($ch, CURLOPT_ENCODING, $defheaders['Accept-Encoding']); unset($defheaders['Accept-Encoding']); } if ($defheaders['proxy']) { $proxy_type = strtoupper($defheaders['proxy']['type']) == 'SOCKET' ? CURLPROXY_SOCKS5 : CURLPROXY_HTTP; curl_setopt($ch, CURLOPT_PROXYTYPE, $proxy_type); curl_setopt($ch, CURLOPT_PROXY, $defheaders['proxy']['host']); if ($headers['proxy']['auth']) { list($auth_type, $auth_user, $auth_pass) = explode(':', $headers['proxy']['auth']); $auth_type = $auth_type == 'NTLM' ? CURLAUTH_BASIC : CURLAUTH_NTLM; curl_setopt($ch, CURLOPT_PROXYAUTH, $auth_type); $user = "" . $auth_user . ":" . $auth_pass . ""; curl_setopt($ch, CURLOPT_PROXYUSERPWD, $user); } } unset($defheaders['proxy']); curl_setopt($ch, CURLOPT_MAXREDIRS, $deep ? $deep : 5); curl_setopt($ch, CURLOPT_FOLLOWLOCATION, 1); $header_array = array(); foreach ($defheaders as $key => $val) { $header_array[] = $key . ': ' . $val; } curl_setopt($ch, CURLOPT_HTTPHEADER, $header_array); $data = curl_exec($ch); if (curl_errno($ch)) { } if (!$data) { curl_close($ch); return ''; } $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE); self::$last_response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE); self::$url = curl_getinfo($ch, CURLINFO_EFFECTIVE_URL); $header = substr($data, 0, $header_size); $data = substr($data, $header_size); self::$last_header = self::extract_header($header); $header = explode("\r\n\r\n", trim($header)); $header = array_pop($header); if (!$charset) { preg_match('@Content-Type:\s*([\w\/]+)(;\s+charset\s*=\s*([\w-]+))?@is', $header, $charsetmatch); if (isset($charsetmatch[3])) { $charset = $charsetmatch[3]; } } return self::convert_html_charset($data, $charset); } elseif ($https && $allow_url_fopen && in_array('https', $stream_wraps)) { if (extension_loaded('openssl')) { return file_get_contents($url); } else { throw new Exception('unopen openssl extension'); } } elseif ($allow_url_fopen && empty($post) && empty($cookie) && in_array('http', $stream_wraps) ) { $opts = array('http' => array('method' => 'GET', 'timeout' => $timeout)); $context = stream_context_create($opts); $html = file_get_contents($url, false, $context); return self::convert_html_charset($html, $charset); } else { return FALSE; } } private static function extract_header($header) { $lines = explode("\n", $header); $result = array(); foreach ($lines as $line) { list($key, $val) = explode(":", $line, 2); $key = trim(strtolower($key)); switch ($key) { case 'set-cookie': if (!isset($result['cookie'])) { $result['cookie'] = array(); } $result['cookie'][] = $val; break; default: $result[$key] = trim($val); break; } } return $result; } private static function gzdecode($data) { return gzinflate(substr($data, 10, -8)); } private static function convert_html_charset($html, $charset, $tocharset = 'utf-8') { if ($charset == 'bin') { return $html; } $detect_charset = ''; if ($charset) { $detect_charset = $charset; } else { if (stripos($html, '<meta') !== false) { if (strpos($html, 'charset=') !== false) { $head = self::mask_match(strtolower($html), '(*)</head>'); if ($head) { $head = strtolower($head); $head = self::reg_replace($head, array( '<script(*)/script>' => '', '<style(*)/style>' => '', '<link(*)>' => '', "\r" => '', "\n" => '', "\t" => '', " " => '', "'" => ' ', "\"" => ' ', )); preg_match_all('/charset\s*?=\s*?([\-\w]+)/', $head, $matches); } else { preg_match_all('/<meta[^>]*?content=("|\'|).*?\bcharset=([\w\-]+)\b/is', $html, $matches); } if (isset($matches[1][0]) && !empty($matches[1][0])) { $detect_charset = $matches[1][0]; } } } if (stripos($html, '<?xml') !== false) { if (stripos($html, 'encoding=') !== false) { $head = self::mask_match($html, '<' . '?xml(*)?' . '>'); preg_match_all('/encoding=["\']?([-\w]+)/is', $head, $matches); if (isset($matches[1][0]) && !empty($matches[1][0])) { $detect_charset = $matches[1][0]; } } } } if (strtolower($detect_charset) == 'iso-8859-1') { $detect_charset = 'gbk'; } if ($detect_charset) { return iconv($detect_charset . '//ignore', $tocharset . '//ignore', $html); } else { return $html; } } public static function multi_fetch_url($urls) { if (!function_exists('curl_multi_init')) { $data = array(); foreach ($urls as $k => $url) { $data[$k] = self::fetch_url($url); } return $data; } $multi_handle = curl_multi_init(); $conn = $data = array(); foreach ($urls as $i => $url) { $conn[$i] = curl_init($url); curl_setopt($conn[$i], CURLOPT_ENCODING, ''); curl_setopt($conn[$i], CURLOPT_RETURNTRANSFER, 1); $timeout = 3; curl_setopt($conn[$i], CURLOPT_CONNECTTIMEOUT, $timeout); curl_setopt($conn[$i], CURLOPT_FOLLOWLOCATION, 1); curl_multi_add_handle($multi_handle, $conn[$i]); } do { $mrc = curl_multi_exec($multi_handle, $active); } while ($mrc == CURLM_CALL_MULTI_PERFORM); while ($active and $mrc == CURLM_OK) { if (curl_multi_select($multi_handle) != -1) { do { $mrc = curl_multi_exec($multi_handle, $active); } while ($mrc == CURLM_CALL_MULTI_PERFORM); } } foreach ($urls as $i => $url) { $data[$i] = curl_multi_getcontent($conn[$i]); curl_multi_remove_handle($multi_handle, $conn[$i]); curl_close($conn[$i]); } return $data; } } ?>